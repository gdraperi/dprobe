// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

//go:generate go run gen.go

// This program generates internet protocol constants and tables by
// reading IANA protocol registries.
package main

import (
	"bytes"
	"encoding/xml"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
)

var registries = []struct ***REMOVED***
	url   string
	parse func(io.Writer, io.Reader) error
***REMOVED******REMOVED***
	***REMOVED***
		"https://www.iana.org/assignments/dscp-registry/dscp-registry.xml",
		parseDSCPRegistry,
	***REMOVED***,
	***REMOVED***
		"https://www.iana.org/assignments/ipv4-tos-byte/ipv4-tos-byte.xml",
		parseTOSTCByte,
	***REMOVED***,
	***REMOVED***
		"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xml",
		parseProtocolNumbers,
	***REMOVED***,
***REMOVED***

func main() ***REMOVED***
	var bb bytes.Buffer
	fmt.Fprintf(&bb, "// go generate gen.go\n")
	fmt.Fprintf(&bb, "// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT\n\n")
	fmt.Fprintf(&bb, "// Package iana provides protocol number resources managed by the Internet Assigned Numbers Authority (IANA).\n")
	fmt.Fprintf(&bb, `package iana // import "golang.org/x/net/internal/iana"`+"\n\n")
	for _, r := range registries ***REMOVED***
		resp, err := http.Get(r.url)
		if err != nil ***REMOVED***
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		***REMOVED***
		defer resp.Body.Close()
		if resp.StatusCode != http.StatusOK ***REMOVED***
			fmt.Fprintf(os.Stderr, "got HTTP status code %v for %v\n", resp.StatusCode, r.url)
			os.Exit(1)
		***REMOVED***
		if err := r.parse(&bb, resp.Body); err != nil ***REMOVED***
			fmt.Fprintln(os.Stderr, err)
			os.Exit(1)
		***REMOVED***
		fmt.Fprintf(&bb, "\n")
	***REMOVED***
	b, err := format.Source(bb.Bytes())
	if err != nil ***REMOVED***
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	***REMOVED***
	if err := ioutil.WriteFile("const.go", b, 0644); err != nil ***REMOVED***
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	***REMOVED***
***REMOVED***

func parseDSCPRegistry(w io.Writer, r io.Reader) error ***REMOVED***
	dec := xml.NewDecoder(r)
	var dr dscpRegistry
	if err := dec.Decode(&dr); err != nil ***REMOVED***
		return err
	***REMOVED***
	drs := dr.escape()
	fmt.Fprintf(w, "// %s, Updated: %s\n", dr.Title, dr.Updated)
	fmt.Fprintf(w, "const (\n")
	for _, dr := range drs ***REMOVED***
		fmt.Fprintf(w, "DiffServ%s = %#x", dr.Name, dr.Value)
		fmt.Fprintf(w, "// %s\n", dr.OrigName)
	***REMOVED***
	fmt.Fprintf(w, ")\n")
	return nil
***REMOVED***

type dscpRegistry struct ***REMOVED***
	XMLName     xml.Name `xml:"registry"`
	Title       string   `xml:"title"`
	Updated     string   `xml:"updated"`
	Note        string   `xml:"note"`
	RegTitle    string   `xml:"registry>title"`
	PoolRecords []struct ***REMOVED***
		Name  string `xml:"name"`
		Space string `xml:"space"`
	***REMOVED*** `xml:"registry>record"`
	Records []struct ***REMOVED***
		Name  string `xml:"name"`
		Space string `xml:"space"`
	***REMOVED*** `xml:"registry>registry>record"`
***REMOVED***

type canonDSCPRecord struct ***REMOVED***
	OrigName string
	Name     string
	Value    int
***REMOVED***

func (drr *dscpRegistry) escape() []canonDSCPRecord ***REMOVED***
	drs := make([]canonDSCPRecord, len(drr.Records))
	sr := strings.NewReplacer(
		"+", "",
		"-", "",
		"/", "",
		".", "",
		" ", "",
	)
	for i, dr := range drr.Records ***REMOVED***
		s := strings.TrimSpace(dr.Name)
		drs[i].OrigName = s
		drs[i].Name = sr.Replace(s)
		n, err := strconv.ParseUint(dr.Space, 2, 8)
		if err != nil ***REMOVED***
			continue
		***REMOVED***
		drs[i].Value = int(n) << 2
	***REMOVED***
	return drs
***REMOVED***

func parseTOSTCByte(w io.Writer, r io.Reader) error ***REMOVED***
	dec := xml.NewDecoder(r)
	var ttb tosTCByte
	if err := dec.Decode(&ttb); err != nil ***REMOVED***
		return err
	***REMOVED***
	trs := ttb.escape()
	fmt.Fprintf(w, "// %s, Updated: %s\n", ttb.Title, ttb.Updated)
	fmt.Fprintf(w, "const (\n")
	for _, tr := range trs ***REMOVED***
		fmt.Fprintf(w, "%s = %#x", tr.Keyword, tr.Value)
		fmt.Fprintf(w, "// %s\n", tr.OrigKeyword)
	***REMOVED***
	fmt.Fprintf(w, ")\n")
	return nil
***REMOVED***

type tosTCByte struct ***REMOVED***
	XMLName  xml.Name `xml:"registry"`
	Title    string   `xml:"title"`
	Updated  string   `xml:"updated"`
	Note     string   `xml:"note"`
	RegTitle string   `xml:"registry>title"`
	Records  []struct ***REMOVED***
		Binary  string `xml:"binary"`
		Keyword string `xml:"keyword"`
	***REMOVED*** `xml:"registry>record"`
***REMOVED***

type canonTOSTCByteRecord struct ***REMOVED***
	OrigKeyword string
	Keyword     string
	Value       int
***REMOVED***

func (ttb *tosTCByte) escape() []canonTOSTCByteRecord ***REMOVED***
	trs := make([]canonTOSTCByteRecord, len(ttb.Records))
	sr := strings.NewReplacer(
		"Capable", "",
		"(", "",
		")", "",
		"+", "",
		"-", "",
		"/", "",
		".", "",
		" ", "",
	)
	for i, tr := range ttb.Records ***REMOVED***
		s := strings.TrimSpace(tr.Keyword)
		trs[i].OrigKeyword = s
		ss := strings.Split(s, " ")
		if len(ss) > 1 ***REMOVED***
			trs[i].Keyword = strings.Join(ss[1:], " ")
		***REMOVED*** else ***REMOVED***
			trs[i].Keyword = ss[0]
		***REMOVED***
		trs[i].Keyword = sr.Replace(trs[i].Keyword)
		n, err := strconv.ParseUint(tr.Binary, 2, 8)
		if err != nil ***REMOVED***
			continue
		***REMOVED***
		trs[i].Value = int(n)
	***REMOVED***
	return trs
***REMOVED***

func parseProtocolNumbers(w io.Writer, r io.Reader) error ***REMOVED***
	dec := xml.NewDecoder(r)
	var pn protocolNumbers
	if err := dec.Decode(&pn); err != nil ***REMOVED***
		return err
	***REMOVED***
	prs := pn.escape()
	prs = append([]canonProtocolRecord***REMOVED******REMOVED***
		Name:  "IP",
		Descr: "IPv4 encapsulation, pseudo protocol number",
		Value: 0,
	***REMOVED******REMOVED***, prs...)
	fmt.Fprintf(w, "// %s, Updated: %s\n", pn.Title, pn.Updated)
	fmt.Fprintf(w, "const (\n")
	for _, pr := range prs ***REMOVED***
		if pr.Name == "" ***REMOVED***
			continue
		***REMOVED***
		fmt.Fprintf(w, "Protocol%s = %d", pr.Name, pr.Value)
		s := pr.Descr
		if s == "" ***REMOVED***
			s = pr.OrigName
		***REMOVED***
		fmt.Fprintf(w, "// %s\n", s)
	***REMOVED***
	fmt.Fprintf(w, ")\n")
	return nil
***REMOVED***

type protocolNumbers struct ***REMOVED***
	XMLName  xml.Name `xml:"registry"`
	Title    string   `xml:"title"`
	Updated  string   `xml:"updated"`
	RegTitle string   `xml:"registry>title"`
	Note     string   `xml:"registry>note"`
	Records  []struct ***REMOVED***
		Value string `xml:"value"`
		Name  string `xml:"name"`
		Descr string `xml:"description"`
	***REMOVED*** `xml:"registry>record"`
***REMOVED***

type canonProtocolRecord struct ***REMOVED***
	OrigName string
	Name     string
	Descr    string
	Value    int
***REMOVED***

func (pn *protocolNumbers) escape() []canonProtocolRecord ***REMOVED***
	prs := make([]canonProtocolRecord, len(pn.Records))
	sr := strings.NewReplacer(
		"-in-", "in",
		"-within-", "within",
		"-over-", "over",
		"+", "P",
		"-", "",
		"/", "",
		".", "",
		" ", "",
	)
	for i, pr := range pn.Records ***REMOVED***
		if strings.Contains(pr.Name, "Deprecated") ||
			strings.Contains(pr.Name, "deprecated") ***REMOVED***
			continue
		***REMOVED***
		prs[i].OrigName = pr.Name
		s := strings.TrimSpace(pr.Name)
		switch pr.Name ***REMOVED***
		case "ISIS over IPv4":
			prs[i].Name = "ISIS"
		case "manet":
			prs[i].Name = "MANET"
		default:
			prs[i].Name = sr.Replace(s)
		***REMOVED***
		ss := strings.Split(pr.Descr, "\n")
		for i := range ss ***REMOVED***
			ss[i] = strings.TrimSpace(ss[i])
		***REMOVED***
		if len(ss) > 1 ***REMOVED***
			prs[i].Descr = strings.Join(ss, " ")
		***REMOVED*** else ***REMOVED***
			prs[i].Descr = ss[0]
		***REMOVED***
		prs[i].Value, _ = strconv.Atoi(pr.Value)
	***REMOVED***
	return prs
***REMOVED***
