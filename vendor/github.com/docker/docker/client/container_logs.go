package client

import (
	"io"
	"net/url"
	"time"

	"golang.org/x/net/context"

	"github.com/docker/docker/api/types"
	timetypes "github.com/docker/docker/api/types/time"
)

// ContainerLogs returns the logs generated by a container in an io.ReadCloser.
// It's up to the caller to close the stream.
//
// The stream format on the response will be in one of two formats:
//
// If the container is using a TTY, there is only a single stream (stdout), and
// data is copied directly from the container output stream, no extra
// multiplexing or headers.
//
// If the container is *not* using a TTY, streams for stdout and stderr are
// multiplexed.
// The format of the multiplexed stream is as follows:
//
//    [8]byte***REMOVED***STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4***REMOVED***[]byte***REMOVED***OUTPUT***REMOVED***
//
// STREAM_TYPE can be 1 for stdout and 2 for stderr
//
// SIZE1, SIZE2, SIZE3, and SIZE4 are four bytes of uint32 encoded as big endian.
// This is the size of OUTPUT.
//
// You can use github.com/docker/docker/pkg/stdcopy.StdCopy to demultiplex this
// stream.
func (cli *Client) ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (io.ReadCloser, error) ***REMOVED***
	query := url.Values***REMOVED******REMOVED***
	if options.ShowStdout ***REMOVED***
		query.Set("stdout", "1")
	***REMOVED***

	if options.ShowStderr ***REMOVED***
		query.Set("stderr", "1")
	***REMOVED***

	if options.Since != "" ***REMOVED***
		ts, err := timetypes.GetTimestamp(options.Since, time.Now())
		if err != nil ***REMOVED***
			return nil, err
		***REMOVED***
		query.Set("since", ts)
	***REMOVED***

	if options.Until != "" ***REMOVED***
		ts, err := timetypes.GetTimestamp(options.Until, time.Now())
		if err != nil ***REMOVED***
			return nil, err
		***REMOVED***
		query.Set("until", ts)
	***REMOVED***

	if options.Timestamps ***REMOVED***
		query.Set("timestamps", "1")
	***REMOVED***

	if options.Details ***REMOVED***
		query.Set("details", "1")
	***REMOVED***

	if options.Follow ***REMOVED***
		query.Set("follow", "1")
	***REMOVED***
	query.Set("tail", options.Tail)

	resp, err := cli.get(ctx, "/containers/"+container+"/logs", query, nil)
	if err != nil ***REMOVED***
		return nil, wrapResponseError(err, resp, "container", container)
	***REMOVED***
	return resp.body, nil
***REMOVED***
