// Code generated by protoc-gen-gogo.
// source: wrappers.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	wrappers.proto

It has these top-level messages:
	DoubleValue
	FloatValue
	Int64Value
	UInt64Value
	Int32Value
	UInt32Value
	BoolValue
	StringValue
	BytesValue
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Wrapper message for `double`.
//
// The JSON representation for `DoubleValue` is JSON number.
type DoubleValue struct ***REMOVED***
	// The double value.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *DoubleValue) Reset()                    ***REMOVED*** *m = DoubleValue***REMOVED******REMOVED*** ***REMOVED***
func (*DoubleValue) ProtoMessage()               ***REMOVED******REMOVED***
func (*DoubleValue) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***0***REMOVED*** ***REMOVED***
func (*DoubleValue) XXX_WellKnownType() string   ***REMOVED*** return "DoubleValue" ***REMOVED***

func (m *DoubleValue) GetValue() float64 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `float`.
//
// The JSON representation for `FloatValue` is JSON number.
type FloatValue struct ***REMOVED***
	// The float value.
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *FloatValue) Reset()                    ***REMOVED*** *m = FloatValue***REMOVED******REMOVED*** ***REMOVED***
func (*FloatValue) ProtoMessage()               ***REMOVED******REMOVED***
func (*FloatValue) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***1***REMOVED*** ***REMOVED***
func (*FloatValue) XXX_WellKnownType() string   ***REMOVED*** return "FloatValue" ***REMOVED***

func (m *FloatValue) GetValue() float32 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `int64`.
//
// The JSON representation for `Int64Value` is JSON string.
type Int64Value struct ***REMOVED***
	// The int64 value.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *Int64Value) Reset()                    ***REMOVED*** *m = Int64Value***REMOVED******REMOVED*** ***REMOVED***
func (*Int64Value) ProtoMessage()               ***REMOVED******REMOVED***
func (*Int64Value) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***2***REMOVED*** ***REMOVED***
func (*Int64Value) XXX_WellKnownType() string   ***REMOVED*** return "Int64Value" ***REMOVED***

func (m *Int64Value) GetValue() int64 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `uint64`.
//
// The JSON representation for `UInt64Value` is JSON string.
type UInt64Value struct ***REMOVED***
	// The uint64 value.
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *UInt64Value) Reset()                    ***REMOVED*** *m = UInt64Value***REMOVED******REMOVED*** ***REMOVED***
func (*UInt64Value) ProtoMessage()               ***REMOVED******REMOVED***
func (*UInt64Value) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***3***REMOVED*** ***REMOVED***
func (*UInt64Value) XXX_WellKnownType() string   ***REMOVED*** return "UInt64Value" ***REMOVED***

func (m *UInt64Value) GetValue() uint64 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `int32`.
//
// The JSON representation for `Int32Value` is JSON number.
type Int32Value struct ***REMOVED***
	// The int32 value.
	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *Int32Value) Reset()                    ***REMOVED*** *m = Int32Value***REMOVED******REMOVED*** ***REMOVED***
func (*Int32Value) ProtoMessage()               ***REMOVED******REMOVED***
func (*Int32Value) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***4***REMOVED*** ***REMOVED***
func (*Int32Value) XXX_WellKnownType() string   ***REMOVED*** return "Int32Value" ***REMOVED***

func (m *Int32Value) GetValue() int32 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `uint32`.
//
// The JSON representation for `UInt32Value` is JSON number.
type UInt32Value struct ***REMOVED***
	// The uint32 value.
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *UInt32Value) Reset()                    ***REMOVED*** *m = UInt32Value***REMOVED******REMOVED*** ***REMOVED***
func (*UInt32Value) ProtoMessage()               ***REMOVED******REMOVED***
func (*UInt32Value) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***5***REMOVED*** ***REMOVED***
func (*UInt32Value) XXX_WellKnownType() string   ***REMOVED*** return "UInt32Value" ***REMOVED***

func (m *UInt32Value) GetValue() uint32 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return 0
***REMOVED***

// Wrapper message for `bool`.
//
// The JSON representation for `BoolValue` is JSON `true` and `false`.
type BoolValue struct ***REMOVED***
	// The bool value.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *BoolValue) Reset()                    ***REMOVED*** *m = BoolValue***REMOVED******REMOVED*** ***REMOVED***
func (*BoolValue) ProtoMessage()               ***REMOVED******REMOVED***
func (*BoolValue) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***6***REMOVED*** ***REMOVED***
func (*BoolValue) XXX_WellKnownType() string   ***REMOVED*** return "BoolValue" ***REMOVED***

func (m *BoolValue) GetValue() bool ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return false
***REMOVED***

// Wrapper message for `string`.
//
// The JSON representation for `StringValue` is JSON string.
type StringValue struct ***REMOVED***
	// The string value.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *StringValue) Reset()                    ***REMOVED*** *m = StringValue***REMOVED******REMOVED*** ***REMOVED***
func (*StringValue) ProtoMessage()               ***REMOVED******REMOVED***
func (*StringValue) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***7***REMOVED*** ***REMOVED***
func (*StringValue) XXX_WellKnownType() string   ***REMOVED*** return "StringValue" ***REMOVED***

func (m *StringValue) GetValue() string ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return ""
***REMOVED***

// Wrapper message for `bytes`.
//
// The JSON representation for `BytesValue` is JSON string.
type BytesValue struct ***REMOVED***
	// The bytes value.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
***REMOVED***

func (m *BytesValue) Reset()                    ***REMOVED*** *m = BytesValue***REMOVED******REMOVED*** ***REMOVED***
func (*BytesValue) ProtoMessage()               ***REMOVED******REMOVED***
func (*BytesValue) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorWrappers, []int***REMOVED***8***REMOVED*** ***REMOVED***
func (*BytesValue) XXX_WellKnownType() string   ***REMOVED*** return "BytesValue" ***REMOVED***

func (m *BytesValue) GetValue() []byte ***REMOVED***
	if m != nil ***REMOVED***
		return m.Value
	***REMOVED***
	return nil
***REMOVED***

func init() ***REMOVED***
	proto.RegisterType((*DoubleValue)(nil), "google.protobuf.DoubleValue")
	proto.RegisterType((*FloatValue)(nil), "google.protobuf.FloatValue")
	proto.RegisterType((*Int64Value)(nil), "google.protobuf.Int64Value")
	proto.RegisterType((*UInt64Value)(nil), "google.protobuf.UInt64Value")
	proto.RegisterType((*Int32Value)(nil), "google.protobuf.Int32Value")
	proto.RegisterType((*UInt32Value)(nil), "google.protobuf.UInt32Value")
	proto.RegisterType((*BoolValue)(nil), "google.protobuf.BoolValue")
	proto.RegisterType((*StringValue)(nil), "google.protobuf.StringValue")
	proto.RegisterType((*BytesValue)(nil), "google.protobuf.BytesValue")
***REMOVED***
func (this *DoubleValue) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*DoubleValue)
	if !ok ***REMOVED***
		that2, ok := that.(DoubleValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *FloatValue) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*FloatValue)
	if !ok ***REMOVED***
		that2, ok := that.(FloatValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *Int64Value) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*Int64Value)
	if !ok ***REMOVED***
		that2, ok := that.(Int64Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *UInt64Value) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*UInt64Value)
	if !ok ***REMOVED***
		that2, ok := that.(UInt64Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *Int32Value) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*Int32Value)
	if !ok ***REMOVED***
		that2, ok := that.(Int32Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *UInt32Value) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*UInt32Value)
	if !ok ***REMOVED***
		that2, ok := that.(UInt32Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *BoolValue) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*BoolValue)
	if !ok ***REMOVED***
		that2, ok := that.(BoolValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if !this.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *StringValue) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*StringValue)
	if !ok ***REMOVED***
		that2, ok := that.(StringValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		if this.Value < that1.Value ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *BytesValue) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*BytesValue)
	if !ok ***REMOVED***
		that2, ok := that.(BytesValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if c := bytes.Compare(this.Value, that1.Value); c != 0 ***REMOVED***
		return c
	***REMOVED***
	return 0
***REMOVED***
func (this *DoubleValue) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*DoubleValue)
	if !ok ***REMOVED***
		that2, ok := that.(DoubleValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *FloatValue) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*FloatValue)
	if !ok ***REMOVED***
		that2, ok := that.(FloatValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *Int64Value) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*Int64Value)
	if !ok ***REMOVED***
		that2, ok := that.(Int64Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *UInt64Value) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*UInt64Value)
	if !ok ***REMOVED***
		that2, ok := that.(UInt64Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *Int32Value) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*Int32Value)
	if !ok ***REMOVED***
		that2, ok := that.(Int32Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *UInt32Value) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*UInt32Value)
	if !ok ***REMOVED***
		that2, ok := that.(UInt32Value)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *BoolValue) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*BoolValue)
	if !ok ***REMOVED***
		that2, ok := that.(BoolValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *StringValue) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*StringValue)
	if !ok ***REMOVED***
		that2, ok := that.(StringValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Value != that1.Value ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *BytesValue) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*BytesValue)
	if !ok ***REMOVED***
		that2, ok := that.(BytesValue)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if !bytes.Equal(this.Value, that1.Value) ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *DoubleValue) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.DoubleValue***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *FloatValue) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.FloatValue***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *Int64Value) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.Int64Value***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *UInt64Value) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.UInt64Value***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *Int32Value) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.Int32Value***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *UInt32Value) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.UInt32Value***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *BoolValue) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.BoolValue***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *StringValue) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.StringValue***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func (this *BytesValue) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 5)
	s = append(s, "&types.BytesValue***REMOVED***")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func valueToGoStringWrappers(v interface***REMOVED******REMOVED***, typ string) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v ***REMOVED*** return &v ***REMOVED*** ( %#v )", typ, typ, pv)
***REMOVED***
func (m *DoubleValue) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *DoubleValue) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Wrappers(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *FloatValue) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *FloatValue) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Wrappers(dAtA, i, uint32(math.Float32bits(float32(m.Value))))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Int64Value) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Int64Value) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0x8
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(m.Value))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *UInt64Value) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *UInt64Value) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0x8
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(m.Value))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Int32Value) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Int32Value) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0x8
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(m.Value))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *UInt32Value) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *UInt32Value) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		dAtA[i] = 0x8
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(m.Value))
	***REMOVED***
	return i, nil
***REMOVED***

func (m *BoolValue) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *BoolValue) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Value ***REMOVED***
		dAtA[i] = 0x8
		i++
		if m.Value ***REMOVED***
			dAtA[i] = 1
		***REMOVED*** else ***REMOVED***
			dAtA[i] = 0
		***REMOVED***
		i++
	***REMOVED***
	return i, nil
***REMOVED***

func (m *StringValue) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *StringValue) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	***REMOVED***
	return i, nil
***REMOVED***

func (m *BytesValue) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *BytesValue) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintWrappers(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	***REMOVED***
	return i, nil
***REMOVED***

func encodeFixed64Wrappers(dAtA []byte, offset int, v uint64) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
***REMOVED***
func encodeFixed32Wrappers(dAtA []byte, offset int, v uint32) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
***REMOVED***
func encodeVarintWrappers(dAtA []byte, offset int, v uint64) int ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	***REMOVED***
	dAtA[offset] = uint8(v)
	return offset + 1
***REMOVED***
func NewPopulatedDoubleValue(r randyWrappers, easy bool) *DoubleValue ***REMOVED***
	this := &DoubleValue***REMOVED******REMOVED***
	this.Value = float64(r.Float64())
	if r.Intn(2) == 0 ***REMOVED***
		this.Value *= -1
	***REMOVED***
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedFloatValue(r randyWrappers, easy bool) *FloatValue ***REMOVED***
	this := &FloatValue***REMOVED******REMOVED***
	this.Value = float32(r.Float32())
	if r.Intn(2) == 0 ***REMOVED***
		this.Value *= -1
	***REMOVED***
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedInt64Value(r randyWrappers, easy bool) *Int64Value ***REMOVED***
	this := &Int64Value***REMOVED******REMOVED***
	this.Value = int64(r.Int63())
	if r.Intn(2) == 0 ***REMOVED***
		this.Value *= -1
	***REMOVED***
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedUInt64Value(r randyWrappers, easy bool) *UInt64Value ***REMOVED***
	this := &UInt64Value***REMOVED******REMOVED***
	this.Value = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedInt32Value(r randyWrappers, easy bool) *Int32Value ***REMOVED***
	this := &Int32Value***REMOVED******REMOVED***
	this.Value = int32(r.Int31())
	if r.Intn(2) == 0 ***REMOVED***
		this.Value *= -1
	***REMOVED***
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedUInt32Value(r randyWrappers, easy bool) *UInt32Value ***REMOVED***
	this := &UInt32Value***REMOVED******REMOVED***
	this.Value = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedBoolValue(r randyWrappers, easy bool) *BoolValue ***REMOVED***
	this := &BoolValue***REMOVED******REMOVED***
	this.Value = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedStringValue(r randyWrappers, easy bool) *StringValue ***REMOVED***
	this := &StringValue***REMOVED******REMOVED***
	this.Value = string(randStringWrappers(r))
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

func NewPopulatedBytesValue(r randyWrappers, easy bool) *BytesValue ***REMOVED***
	this := &BytesValue***REMOVED******REMOVED***
	v1 := r.Intn(100)
	this.Value = make([]byte, v1)
	for i := 0; i < v1; i++ ***REMOVED***
		this.Value[i] = byte(r.Intn(256))
	***REMOVED***
	if !easy && r.Intn(10) != 0 ***REMOVED***
	***REMOVED***
	return this
***REMOVED***

type randyWrappers interface ***REMOVED***
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
***REMOVED***

func randUTF8RuneWrappers(r randyWrappers) rune ***REMOVED***
	ru := r.Intn(62)
	if ru < 10 ***REMOVED***
		return rune(ru + 48)
	***REMOVED*** else if ru < 36 ***REMOVED***
		return rune(ru + 55)
	***REMOVED***
	return rune(ru + 61)
***REMOVED***
func randStringWrappers(r randyWrappers) string ***REMOVED***
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ ***REMOVED***
		tmps[i] = randUTF8RuneWrappers(r)
	***REMOVED***
	return string(tmps)
***REMOVED***
func randUnrecognizedWrappers(r randyWrappers, maxFieldNumber int) (dAtA []byte) ***REMOVED***
	l := r.Intn(5)
	for i := 0; i < l; i++ ***REMOVED***
		wire := r.Intn(4)
		if wire == 3 ***REMOVED***
			wire = 5
		***REMOVED***
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldWrappers(dAtA, r, fieldNumber, wire)
	***REMOVED***
	return dAtA
***REMOVED***
func randFieldWrappers(dAtA []byte, r randyWrappers, fieldNumber int, wire int) []byte ***REMOVED***
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire ***REMOVED***
	case 0:
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 ***REMOVED***
			v3 *= -1
		***REMOVED***
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(ll))
		for j := 0; j < ll; j++ ***REMOVED***
			dAtA = append(dAtA, byte(r.Intn(256)))
		***REMOVED***
	default:
		dAtA = encodeVarintPopulateWrappers(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	***REMOVED***
	return dAtA
***REMOVED***
func encodeVarintPopulateWrappers(dAtA []byte, v uint64) []byte ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	***REMOVED***
	dAtA = append(dAtA, uint8(v))
	return dAtA
***REMOVED***
func (m *DoubleValue) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 9
	***REMOVED***
	return n
***REMOVED***

func (m *FloatValue) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 5
	***REMOVED***
	return n
***REMOVED***

func (m *Int64Value) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 1 + sovWrappers(uint64(m.Value))
	***REMOVED***
	return n
***REMOVED***

func (m *UInt64Value) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 1 + sovWrappers(uint64(m.Value))
	***REMOVED***
	return n
***REMOVED***

func (m *Int32Value) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 1 + sovWrappers(uint64(m.Value))
	***REMOVED***
	return n
***REMOVED***

func (m *UInt32Value) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value != 0 ***REMOVED***
		n += 1 + sovWrappers(uint64(m.Value))
	***REMOVED***
	return n
***REMOVED***

func (m *BoolValue) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Value ***REMOVED***
		n += 2
	***REMOVED***
	return n
***REMOVED***

func (m *StringValue) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 ***REMOVED***
		n += 1 + l + sovWrappers(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *BytesValue) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 ***REMOVED***
		n += 1 + l + sovWrappers(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func sovWrappers(x uint64) (n int) ***REMOVED***
	for ***REMOVED***
		n++
		x >>= 7
		if x == 0 ***REMOVED***
			break
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***
func sozWrappers(x uint64) (n int) ***REMOVED***
	return sovWrappers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
***REMOVED***
func (this *DoubleValue) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&DoubleValue***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *FloatValue) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&FloatValue***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Int64Value) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Int64Value***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *UInt64Value) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&UInt64Value***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Int32Value) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Int32Value***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *UInt32Value) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&UInt32Value***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *BoolValue) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&BoolValue***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *StringValue) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&StringValue***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *BytesValue) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&BytesValue***REMOVED***`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func valueToStringWrappers(v interface***REMOVED******REMOVED***) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
***REMOVED***
func (m *DoubleValue) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: DoubleValue: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: DoubleValue: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 1 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			var v uint64
			if (iNdEx + 8) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *FloatValue) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: FloatValue: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: FloatValue: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 5 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			var v uint32
			if (iNdEx + 4) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Int64Value) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Int64Value: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Int64Value: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			m.Value = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *UInt64Value) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: UInt64Value: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: UInt64Value: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			m.Value = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Int32Value) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Int32Value: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Int32Value: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			m.Value = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int32(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *UInt32Value) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: UInt32Value: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: UInt32Value: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			m.Value = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *BoolValue) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: BoolValue: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: BoolValue: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			var v int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *StringValue) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: StringValue: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: StringValue: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *BytesValue) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: BytesValue: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: BytesValue: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			***REMOVED***
			var byteLen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if byteLen < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			postIndex := iNdEx + byteLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil ***REMOVED***
				m.Value = []byte***REMOVED******REMOVED***
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWrappers(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthWrappers
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func skipWrappers(dAtA []byte) (n int, err error) ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return 0, ErrIntOverflowWrappers
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return 0, io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		wireType := int(wire & 0x7)
		switch wireType ***REMOVED***
		case 0:
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowWrappers
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			iNdEx += length
			if length < 0 ***REMOVED***
				return 0, ErrInvalidLengthWrappers
			***REMOVED***
			return iNdEx, nil
		case 3:
			for ***REMOVED***
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return 0, ErrIntOverflowWrappers
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return 0, io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 ***REMOVED***
					break
				***REMOVED***
				next, err := skipWrappers(dAtA[start:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				iNdEx = start + next
			***REMOVED***
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		***REMOVED***
	***REMOVED***
	panic("unreachable")
***REMOVED***

var (
	ErrInvalidLengthWrappers = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWrappers   = fmt.Errorf("proto: integer overflow")
)

func init() ***REMOVED*** proto.RegisterFile("wrappers.proto", fileDescriptorWrappers) ***REMOVED***

var fileDescriptorWrappers = []byte***REMOVED***
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2f, 0x4a, 0x2c,
	0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0x85, 0xf0, 0x92, 0x4a, 0xd3, 0x94, 0x94, 0xb9, 0xb8, 0x5d, 0xf2, 0x4b, 0x93, 0x72,
	0x52, 0xc3, 0x12, 0x73, 0x4a, 0x53, 0x85, 0x44, 0xb8, 0x58, 0xcb, 0x40, 0x0c, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xc6, 0x20, 0x08, 0x47, 0x49, 0x89, 0x8b, 0xcb, 0x2d, 0x27, 0x3f, 0xb1, 0x04, 0x8b,
	0x1a, 0x26, 0x24, 0x35, 0x9e, 0x79, 0x25, 0x66, 0x26, 0x58, 0xd4, 0x30, 0xc3, 0xd4, 0x28, 0x73,
	0x71, 0x87, 0xe2, 0x52, 0xc4, 0x82, 0x6a, 0x90, 0xb1, 0x11, 0x16, 0x35, 0xac, 0x68, 0x06, 0x61,
	0x55, 0xc4, 0x0b, 0x53, 0xa4, 0xc8, 0xc5, 0xe9, 0x94, 0x9f, 0x9f, 0x83, 0x45, 0x09, 0x07, 0x92,
	0x39, 0xc1, 0x25, 0x45, 0x99, 0x79, 0xe9, 0x58, 0x14, 0x71, 0x22, 0x39, 0xc8, 0xa9, 0xb2, 0x24,
	0xb5, 0x18, 0x8b, 0x1a, 0x1e, 0xa8, 0x1a, 0xa7, 0x2e, 0xc6, 0x0b, 0x0f, 0xe5, 0x18, 0x6e, 0x3c,
	0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xf1, 0xc7, 0x43, 0x39, 0xc6, 0x86, 0x47, 0x72, 0x8c, 0x2b,
	0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c,
	0x2f, 0x1e, 0xc9, 0x31, 0x7c, 0x00, 0x89, 0x3f, 0x96, 0x63, 0xe4, 0x12, 0x4e, 0xce, 0xcf, 0xd5,
	0x43, 0x8b, 0x0e, 0x27, 0xde, 0x70, 0x68, 0x7c, 0x05, 0x80, 0x44, 0x02, 0x18, 0xa3, 0x58, 0x4b,
	0x2a, 0x0b, 0x52, 0x8b, 0x17, 0x30, 0x32, 0xfe, 0x60, 0x64, 0x5c, 0xc4, 0xc4, 0xec, 0x1e, 0xe0,
	0xb4, 0x8a, 0x49, 0xce, 0x1d, 0xa2, 0x2b, 0x00, 0xaa, 0x4b, 0x2f, 0x3c, 0x35, 0x27, 0xc7, 0x3b,
	0x2f, 0xbf, 0x3c, 0x2f, 0x04, 0xa4, 0x38, 0x89, 0x0d, 0x6c, 0x9c, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x8b, 0x9f, 0x55, 0xfd, 0x01, 0x00, 0x00,
***REMOVED***
