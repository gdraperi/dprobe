// Code generated by protoc-gen-gogo.
// source: duration.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		duration.proto

	It has these top-level messages:
		Duration
*/
package types

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A Duration represents a signed, fixed-length span of time represented
// as a count of seconds and fractions of seconds at nanosecond
// resolution. It is independent of any calendar and concepts like "day"
// or "month". It is related to Timestamp in that the difference between
// two Timestamp values is a Duration and it can be added or subtracted
// from a Timestamp. Range is approximately +-10,000 years.
//
// Example 1: Compute Duration from two Timestamps in pseudo code.
//
//     Timestamp start = ...;
//     Timestamp end = ...;
//     Duration duration = ...;
//
//     duration.seconds = end.seconds - start.seconds;
//     duration.nanos = end.nanos - start.nanos;
//
//     if (duration.seconds < 0 && duration.nanos > 0) ***REMOVED***
//       duration.seconds += 1;
//       duration.nanos -= 1000000000;
// ***REMOVED*** else if (durations.seconds > 0 && duration.nanos < 0) ***REMOVED***
//       duration.seconds -= 1;
//       duration.nanos += 1000000000;
// ***REMOVED***
//
// Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
//
//     Timestamp start = ...;
//     Duration duration = ...;
//     Timestamp end = ...;
//
//     end.seconds = start.seconds + duration.seconds;
//     end.nanos = start.nanos + duration.nanos;
//
//     if (end.nanos < 0) ***REMOVED***
//       end.seconds -= 1;
//       end.nanos += 1000000000;
// ***REMOVED*** else if (end.nanos >= 1000000000) ***REMOVED***
//       end.seconds += 1;
//       end.nanos -= 1000000000;
// ***REMOVED***
//
//
type Duration struct ***REMOVED***
	// Signed seconds of the span of time. Must be from -315,576,000,000
	// to +315,576,000,000 inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Signed fractions of a second at nanosecond resolution of the span
	// of time. Durations less than one second are represented with a 0
	// `seconds` field and a positive or negative `nanos` field. For durations
	// of one second or more, a non-zero value for the `nanos` field must be
	// of the same sign as the `seconds` field. Must be from -999,999,999
	// to +999,999,999 inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
***REMOVED***

func (m *Duration) Reset()                    ***REMOVED*** *m = Duration***REMOVED******REMOVED*** ***REMOVED***
func (*Duration) ProtoMessage()               ***REMOVED******REMOVED***
func (*Duration) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorDuration, []int***REMOVED***0***REMOVED*** ***REMOVED***
func (*Duration) XXX_WellKnownType() string   ***REMOVED*** return "Duration" ***REMOVED***

func (m *Duration) GetSeconds() int64 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Seconds
	***REMOVED***
	return 0
***REMOVED***

func (m *Duration) GetNanos() int32 ***REMOVED***
	if m != nil ***REMOVED***
		return m.Nanos
	***REMOVED***
	return 0
***REMOVED***

func init() ***REMOVED***
	proto.RegisterType((*Duration)(nil), "google.protobuf.Duration")
***REMOVED***
func (this *Duration) Compare(that interface***REMOVED******REMOVED***) int ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED***

	that1, ok := that.(*Duration)
	if !ok ***REMOVED***
		that2, ok := that.(Duration)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return 1
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return 0
		***REMOVED***
		return 1
	***REMOVED*** else if this == nil ***REMOVED***
		return -1
	***REMOVED***
	if this.Seconds != that1.Seconds ***REMOVED***
		if this.Seconds < that1.Seconds ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	if this.Nanos != that1.Nanos ***REMOVED***
		if this.Nanos < that1.Nanos ***REMOVED***
			return -1
		***REMOVED***
		return 1
	***REMOVED***
	return 0
***REMOVED***
func (this *Duration) Equal(that interface***REMOVED******REMOVED***) bool ***REMOVED***
	if that == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED***

	that1, ok := that.(*Duration)
	if !ok ***REMOVED***
		that2, ok := that.(Duration)
		if ok ***REMOVED***
			that1 = &that2
		***REMOVED*** else ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	if that1 == nil ***REMOVED***
		if this == nil ***REMOVED***
			return true
		***REMOVED***
		return false
	***REMOVED*** else if this == nil ***REMOVED***
		return false
	***REMOVED***
	if this.Seconds != that1.Seconds ***REMOVED***
		return false
	***REMOVED***
	if this.Nanos != that1.Nanos ***REMOVED***
		return false
	***REMOVED***
	return true
***REMOVED***
func (this *Duration) GoString() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := make([]string, 0, 6)
	s = append(s, "&types.Duration***REMOVED***")
	s = append(s, "Seconds: "+fmt.Sprintf("%#v", this.Seconds)+",\n")
	s = append(s, "Nanos: "+fmt.Sprintf("%#v", this.Nanos)+",\n")
	s = append(s, "***REMOVED***")
	return strings.Join(s, "")
***REMOVED***
func valueToGoStringDuration(v interface***REMOVED******REMOVED***, typ string) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v ***REMOVED*** return &v ***REMOVED*** ( %#v )", typ, typ, pv)
***REMOVED***
func (m *Duration) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Duration) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 ***REMOVED***
		dAtA[i] = 0x8
		i++
		i = encodeVarintDuration(dAtA, i, uint64(m.Seconds))
	***REMOVED***
	if m.Nanos != 0 ***REMOVED***
		dAtA[i] = 0x10
		i++
		i = encodeVarintDuration(dAtA, i, uint64(m.Nanos))
	***REMOVED***
	return i, nil
***REMOVED***

func encodeFixed64Duration(dAtA []byte, offset int, v uint64) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
***REMOVED***
func encodeFixed32Duration(dAtA []byte, offset int, v uint32) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
***REMOVED***
func encodeVarintDuration(dAtA []byte, offset int, v uint64) int ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	***REMOVED***
	dAtA[offset] = uint8(v)
	return offset + 1
***REMOVED***
func (m *Duration) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Seconds != 0 ***REMOVED***
		n += 1 + sovDuration(uint64(m.Seconds))
	***REMOVED***
	if m.Nanos != 0 ***REMOVED***
		n += 1 + sovDuration(uint64(m.Nanos))
	***REMOVED***
	return n
***REMOVED***

func sovDuration(x uint64) (n int) ***REMOVED***
	for ***REMOVED***
		n++
		x >>= 7
		if x == 0 ***REMOVED***
			break
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***
func sozDuration(x uint64) (n int) ***REMOVED***
	return sovDuration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
***REMOVED***
func (m *Duration) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowDuration
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Duration: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Duration: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			***REMOVED***
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDuration
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		case 2:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Nanos", wireType)
			***REMOVED***
			m.Nanos = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDuration
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanos |= (int32(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		default:
			iNdEx = preIndex
			skippy, err := skipDuration(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthDuration
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func skipDuration(dAtA []byte) (n int, err error) ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return 0, ErrIntOverflowDuration
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return 0, io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		wireType := int(wire & 0x7)
		switch wireType ***REMOVED***
		case 0:
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowDuration
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowDuration
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			iNdEx += length
			if length < 0 ***REMOVED***
				return 0, ErrInvalidLengthDuration
			***REMOVED***
			return iNdEx, nil
		case 3:
			for ***REMOVED***
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return 0, ErrIntOverflowDuration
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return 0, io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 ***REMOVED***
					break
				***REMOVED***
				next, err := skipDuration(dAtA[start:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				iNdEx = start + next
			***REMOVED***
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		***REMOVED***
	***REMOVED***
	panic("unreachable")
***REMOVED***

var (
	ErrInvalidLengthDuration = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDuration   = fmt.Errorf("proto: integer overflow")
)

func init() ***REMOVED*** proto.RegisterFile("duration.proto", fileDescriptorDuration) ***REMOVED***

var fileDescriptorDuration = []byte***REMOVED***
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x29, 0x2d, 0x4a,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0xcf, 0xcf, 0x4f,
	0xcf, 0x49, 0x85, 0xf0, 0x92, 0x4a, 0xd3, 0x94, 0xac, 0xb8, 0x38, 0x5c, 0xa0, 0x4a, 0x84, 0x24,
	0xb8, 0xd8, 0x8b, 0x53, 0x93, 0xf3, 0xf3, 0x52, 0x8a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83,
	0x60, 0x5c, 0x21, 0x11, 0x2e, 0xd6, 0xbc, 0xc4, 0xbc, 0xfc, 0x62, 0x09, 0x26, 0x05, 0x46, 0x0d,
	0xd6, 0x20, 0x08, 0xc7, 0xa9, 0xfe, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c,
	0x94, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f,
	0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe5, 0x18,
	0xb9, 0x84, 0x93, 0xf3, 0x73, 0xf5, 0xd0, 0xac, 0x76, 0xe2, 0x85, 0x59, 0x1c, 0x00, 0x12, 0x09,
	0x60, 0x8c, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x5e, 0xc0, 0xc8, 0xb8, 0x88, 0x89, 0xd9, 0x3d,
	0xc0, 0x69, 0x15, 0x93, 0x9c, 0x3b, 0x44, 0x4b, 0x00, 0x54, 0x8b, 0x5e, 0x78, 0x6a, 0x4e, 0x8e,
	0x77, 0x5e, 0x7e, 0x79, 0x5e, 0x08, 0x48, 0x65, 0x12, 0x1b, 0xd8, 0x2c, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xba, 0xfb, 0x15, 0xc9, 0xe6, 0x00, 0x00, 0x00,
***REMOVED***
