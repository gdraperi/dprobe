// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto

/*
	Package namespaces is a generated protocol buffer package.

	It is generated from these files:
		github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto

	It has these top-level messages:
		Namespace
		GetNamespaceRequest
		GetNamespaceResponse
		ListNamespacesRequest
		ListNamespacesResponse
		CreateNamespaceRequest
		CreateNamespaceResponse
		UpdateNamespaceRequest
		UpdateNamespaceResponse
		DeleteNamespaceRequest
*/
package namespaces

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"
import google_protobuf1 "github.com/gogo/protobuf/types"
import google_protobuf2 "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Namespace struct ***REMOVED***
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels provides an area to include arbitrary data on namespaces.
	//
	// The combined size of a key/value pair cannot exceed 4096 bytes.
	//
	// Note that to add a new value to this field, read the existing set and
	// include the entire result in the update call.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
***REMOVED***

func (m *Namespace) Reset()                    ***REMOVED*** *m = Namespace***REMOVED******REMOVED*** ***REMOVED***
func (*Namespace) ProtoMessage()               ***REMOVED******REMOVED***
func (*Namespace) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***0***REMOVED*** ***REMOVED***

type GetNamespaceRequest struct ***REMOVED***
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
***REMOVED***

func (m *GetNamespaceRequest) Reset()                    ***REMOVED*** *m = GetNamespaceRequest***REMOVED******REMOVED*** ***REMOVED***
func (*GetNamespaceRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***1***REMOVED*** ***REMOVED***

type GetNamespaceResponse struct ***REMOVED***
	Namespace Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace"`
***REMOVED***

func (m *GetNamespaceResponse) Reset()                    ***REMOVED*** *m = GetNamespaceResponse***REMOVED******REMOVED*** ***REMOVED***
func (*GetNamespaceResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*GetNamespaceResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***2***REMOVED*** ***REMOVED***

type ListNamespacesRequest struct ***REMOVED***
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
***REMOVED***

func (m *ListNamespacesRequest) Reset()                    ***REMOVED*** *m = ListNamespacesRequest***REMOVED******REMOVED*** ***REMOVED***
func (*ListNamespacesRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***3***REMOVED*** ***REMOVED***

type ListNamespacesResponse struct ***REMOVED***
	Namespaces []Namespace `protobuf:"bytes,1,rep,name=namespaces" json:"namespaces"`
***REMOVED***

func (m *ListNamespacesResponse) Reset()                    ***REMOVED*** *m = ListNamespacesResponse***REMOVED******REMOVED*** ***REMOVED***
func (*ListNamespacesResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***4***REMOVED*** ***REMOVED***

type CreateNamespaceRequest struct ***REMOVED***
	Namespace Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace"`
***REMOVED***

func (m *CreateNamespaceRequest) Reset()                    ***REMOVED*** *m = CreateNamespaceRequest***REMOVED******REMOVED*** ***REMOVED***
func (*CreateNamespaceRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***5***REMOVED*** ***REMOVED***

type CreateNamespaceResponse struct ***REMOVED***
	Namespace Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace"`
***REMOVED***

func (m *CreateNamespaceResponse) Reset()                    ***REMOVED*** *m = CreateNamespaceResponse***REMOVED******REMOVED*** ***REMOVED***
func (*CreateNamespaceResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*CreateNamespaceResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***6***REMOVED*** ***REMOVED***

// UpdateNamespaceRequest updates the metadata for a namespace.
//
// The operation should follow semantics described in
// https://developers.google.com/protocol-buffers/docs/reference/csharp/class/google/protobuf/well-known-types/field-mask,
// unless otherwise qualified.
type UpdateNamespaceRequest struct ***REMOVED***
	// Namespace provides the target value, as declared by the mask, for the update.
	//
	// The namespace field must be set.
	Namespace Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace"`
	// UpdateMask specifies which fields to perform the update on. If empty,
	// the operation applies to all fields.
	//
	// For the most part, this applies only to selectively updating labels on
	// the namespace. While field masks are typically limited to ascii alphas
	// and digits, we just take everything after the "labels." as the map key.
	UpdateMask *google_protobuf2.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
***REMOVED***

func (m *UpdateNamespaceRequest) Reset()                    ***REMOVED*** *m = UpdateNamespaceRequest***REMOVED******REMOVED*** ***REMOVED***
func (*UpdateNamespaceRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*UpdateNamespaceRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***7***REMOVED*** ***REMOVED***

type UpdateNamespaceResponse struct ***REMOVED***
	Namespace Namespace `protobuf:"bytes,1,opt,name=namespace" json:"namespace"`
***REMOVED***

func (m *UpdateNamespaceResponse) Reset()                    ***REMOVED*** *m = UpdateNamespaceResponse***REMOVED******REMOVED*** ***REMOVED***
func (*UpdateNamespaceResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*UpdateNamespaceResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***8***REMOVED*** ***REMOVED***

type DeleteNamespaceRequest struct ***REMOVED***
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
***REMOVED***

func (m *DeleteNamespaceRequest) Reset()                    ***REMOVED*** *m = DeleteNamespaceRequest***REMOVED******REMOVED*** ***REMOVED***
func (*DeleteNamespaceRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorNamespace, []int***REMOVED***9***REMOVED*** ***REMOVED***

func init() ***REMOVED***
	proto.RegisterType((*Namespace)(nil), "containerd.services.namespaces.v1.Namespace")
	proto.RegisterType((*GetNamespaceRequest)(nil), "containerd.services.namespaces.v1.GetNamespaceRequest")
	proto.RegisterType((*GetNamespaceResponse)(nil), "containerd.services.namespaces.v1.GetNamespaceResponse")
	proto.RegisterType((*ListNamespacesRequest)(nil), "containerd.services.namespaces.v1.ListNamespacesRequest")
	proto.RegisterType((*ListNamespacesResponse)(nil), "containerd.services.namespaces.v1.ListNamespacesResponse")
	proto.RegisterType((*CreateNamespaceRequest)(nil), "containerd.services.namespaces.v1.CreateNamespaceRequest")
	proto.RegisterType((*CreateNamespaceResponse)(nil), "containerd.services.namespaces.v1.CreateNamespaceResponse")
	proto.RegisterType((*UpdateNamespaceRequest)(nil), "containerd.services.namespaces.v1.UpdateNamespaceRequest")
	proto.RegisterType((*UpdateNamespaceResponse)(nil), "containerd.services.namespaces.v1.UpdateNamespaceResponse")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "containerd.services.namespaces.v1.DeleteNamespaceRequest")
***REMOVED***

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Namespaces service

type NamespacesClient interface ***REMOVED***
	Get(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error)
	List(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error)
	Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error)
	Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
***REMOVED***

type namespacesClient struct ***REMOVED***
	cc *grpc.ClientConn
***REMOVED***

func NewNamespacesClient(cc *grpc.ClientConn) NamespacesClient ***REMOVED***
	return &namespacesClient***REMOVED***cc***REMOVED***
***REMOVED***

func (c *namespacesClient) Get(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*GetNamespaceResponse, error) ***REMOVED***
	out := new(GetNamespaceResponse)
	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Get", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *namespacesClient) List(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) ***REMOVED***
	out := new(ListNamespacesResponse)
	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/List", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *namespacesClient) Create(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*CreateNamespaceResponse, error) ***REMOVED***
	out := new(CreateNamespaceResponse)
	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Create", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *namespacesClient) Update(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*UpdateNamespaceResponse, error) ***REMOVED***
	out := new(UpdateNamespaceResponse)
	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Update", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *namespacesClient) Delete(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) ***REMOVED***
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/containerd.services.namespaces.v1.Namespaces/Delete", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

// Server API for Namespaces service

type NamespacesServer interface ***REMOVED***
	Get(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	List(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	Create(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	Update(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	Delete(context.Context, *DeleteNamespaceRequest) (*google_protobuf1.Empty, error)
***REMOVED***

func RegisterNamespacesServer(s *grpc.Server, srv NamespacesServer) ***REMOVED***
	s.RegisterService(&_Namespaces_serviceDesc, srv)
***REMOVED***

func _Namespaces_Get_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(NamespacesServer).Get(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Get",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(NamespacesServer).Get(ctx, req.(*GetNamespaceRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _Namespaces_List_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(NamespacesServer).List(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.namespaces.v1.Namespaces/List",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(NamespacesServer).List(ctx, req.(*ListNamespacesRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _Namespaces_Create_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(NamespacesServer).Create(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Create",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(NamespacesServer).Create(ctx, req.(*CreateNamespaceRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _Namespaces_Update_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(NamespacesServer).Update(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Update",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(NamespacesServer).Update(ctx, req.(*UpdateNamespaceRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _Namespaces_Delete_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(NamespacesServer).Delete(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.namespaces.v1.Namespaces/Delete",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(NamespacesServer).Delete(ctx, req.(*DeleteNamespaceRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

var _Namespaces_serviceDesc = grpc.ServiceDesc***REMOVED***
	ServiceName: "containerd.services.namespaces.v1.Namespaces",
	HandlerType: (*NamespacesServer)(nil),
	Methods: []grpc.MethodDesc***REMOVED***
		***REMOVED***
			MethodName: "Get",
			Handler:    _Namespaces_Get_Handler,
		***REMOVED***,
		***REMOVED***
			MethodName: "List",
			Handler:    _Namespaces_List_Handler,
		***REMOVED***,
		***REMOVED***
			MethodName: "Create",
			Handler:    _Namespaces_Create_Handler,
		***REMOVED***,
		***REMOVED***
			MethodName: "Update",
			Handler:    _Namespaces_Update_Handler,
		***REMOVED***,
		***REMOVED***
			MethodName: "Delete",
			Handler:    _Namespaces_Delete_Handler,
		***REMOVED***,
	***REMOVED***,
	Streams:  []grpc.StreamDesc***REMOVED******REMOVED***,
	Metadata: "github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto",
***REMOVED***

func (m *Namespace) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Namespace) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	***REMOVED***
	if len(m.Labels) > 0 ***REMOVED***
		for k, _ := range m.Labels ***REMOVED***
			dAtA[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovNamespace(uint64(len(k))) + 1 + len(v) + sovNamespace(uint64(len(v)))
			i = encodeVarintNamespace(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *GetNamespaceRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *GetNamespaceRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	***REMOVED***
	return i, nil
***REMOVED***

func (m *GetNamespaceResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *GetNamespaceResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n1, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n1
	return i, nil
***REMOVED***

func (m *ListNamespacesRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *ListNamespacesRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	***REMOVED***
	return i, nil
***REMOVED***

func (m *ListNamespacesResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *ListNamespacesResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespaces) > 0 ***REMOVED***
		for _, msg := range m.Namespaces ***REMOVED***
			dAtA[i] = 0xa
			i++
			i = encodeVarintNamespace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *CreateNamespaceRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *CreateNamespaceRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n2, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n2
	return i, nil
***REMOVED***

func (m *CreateNamespaceResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *CreateNamespaceResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n3, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n3
	return i, nil
***REMOVED***

func (m *UpdateNamespaceRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *UpdateNamespaceRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n4, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n4
	if m.UpdateMask != nil ***REMOVED***
		dAtA[i] = 0x12
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(m.UpdateMask.Size()))
		n5, err := m.UpdateMask.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n5
	***REMOVED***
	return i, nil
***REMOVED***

func (m *UpdateNamespaceResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *UpdateNamespaceResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNamespace(dAtA, i, uint64(m.Namespace.Size()))
	n6, err := m.Namespace.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n6
	return i, nil
***REMOVED***

func (m *DeleteNamespaceRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *DeleteNamespaceRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintNamespace(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	***REMOVED***
	return i, nil
***REMOVED***

func encodeVarintNamespace(dAtA []byte, offset int, v uint64) int ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	***REMOVED***
	dAtA[offset] = uint8(v)
	return offset + 1
***REMOVED***
func (m *Namespace) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 ***REMOVED***
		n += 1 + l + sovNamespace(uint64(l))
	***REMOVED***
	if len(m.Labels) > 0 ***REMOVED***
		for k, v := range m.Labels ***REMOVED***
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovNamespace(uint64(len(k))) + 1 + len(v) + sovNamespace(uint64(len(v)))
			n += mapEntrySize + 1 + sovNamespace(uint64(mapEntrySize))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *GetNamespaceRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 ***REMOVED***
		n += 1 + l + sovNamespace(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *GetNamespaceResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
***REMOVED***

func (m *ListNamespacesRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Filter)
	if l > 0 ***REMOVED***
		n += 1 + l + sovNamespace(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *ListNamespacesResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if len(m.Namespaces) > 0 ***REMOVED***
		for _, e := range m.Namespaces ***REMOVED***
			l = e.Size()
			n += 1 + l + sovNamespace(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *CreateNamespaceRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
***REMOVED***

func (m *CreateNamespaceResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
***REMOVED***

func (m *UpdateNamespaceRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	if m.UpdateMask != nil ***REMOVED***
		l = m.UpdateMask.Size()
		n += 1 + l + sovNamespace(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *UpdateNamespaceResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Namespace.Size()
	n += 1 + l + sovNamespace(uint64(l))
	return n
***REMOVED***

func (m *DeleteNamespaceRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 ***REMOVED***
		n += 1 + l + sovNamespace(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func sovNamespace(x uint64) (n int) ***REMOVED***
	for ***REMOVED***
		n++
		x >>= 7
		if x == 0 ***REMOVED***
			break
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***
func sozNamespace(x uint64) (n int) ***REMOVED***
	return sovNamespace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
***REMOVED***
func (this *Namespace) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels ***REMOVED***
		keysForLabels = append(keysForLabels, k)
	***REMOVED***
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string***REMOVED***"
	for _, k := range keysForLabels ***REMOVED***
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	***REMOVED***
	mapStringForLabels += "***REMOVED***"
	s := strings.Join([]string***REMOVED***`&Namespace***REMOVED***`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *GetNamespaceRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&GetNamespaceRequest***REMOVED***`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *GetNamespaceResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&GetNamespaceResponse***REMOVED***`,
		`Namespace:` + strings.Replace(strings.Replace(this.Namespace.String(), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *ListNamespacesRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&ListNamespacesRequest***REMOVED***`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *ListNamespacesResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&ListNamespacesResponse***REMOVED***`,
		`Namespaces:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Namespaces), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *CreateNamespaceRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&CreateNamespaceRequest***REMOVED***`,
		`Namespace:` + strings.Replace(strings.Replace(this.Namespace.String(), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *CreateNamespaceResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&CreateNamespaceResponse***REMOVED***`,
		`Namespace:` + strings.Replace(strings.Replace(this.Namespace.String(), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *UpdateNamespaceRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&UpdateNamespaceRequest***REMOVED***`,
		`Namespace:` + strings.Replace(strings.Replace(this.Namespace.String(), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`UpdateMask:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMask), "FieldMask", "google_protobuf2.FieldMask", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *UpdateNamespaceResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&UpdateNamespaceResponse***REMOVED***`,
		`Namespace:` + strings.Replace(strings.Replace(this.Namespace.String(), "Namespace", "Namespace", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *DeleteNamespaceRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&DeleteNamespaceRequest***REMOVED***`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func valueToStringNamespace(v interface***REMOVED******REMOVED***) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
***REMOVED***
func (m *Namespace) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Namespace: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Namespace: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Labels == nil ***REMOVED***
				m.Labels = make(map[string]string)
			***REMOVED***
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex ***REMOVED***
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowNamespace
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 ***REMOVED***
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 ***REMOVED***
						if shift >= 64 ***REMOVED***
							return ErrIntOverflowNamespace
						***REMOVED***
						if iNdEx >= l ***REMOVED***
							return io.ErrUnexpectedEOF
						***REMOVED***
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 ***REMOVED***
							break
						***REMOVED***
					***REMOVED***
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 ***REMOVED***
						return ErrInvalidLengthNamespace
					***REMOVED***
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				***REMOVED*** else if fieldNum == 2 ***REMOVED***
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 ***REMOVED***
						if shift >= 64 ***REMOVED***
							return ErrIntOverflowNamespace
						***REMOVED***
						if iNdEx >= l ***REMOVED***
							return io.ErrUnexpectedEOF
						***REMOVED***
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 ***REMOVED***
							break
						***REMOVED***
					***REMOVED***
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 ***REMOVED***
						return ErrInvalidLengthNamespace
					***REMOVED***
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				***REMOVED*** else ***REMOVED***
					iNdEx = entryPreIndex
					skippy, err := skipNamespace(dAtA[iNdEx:])
					if err != nil ***REMOVED***
						return err
					***REMOVED***
					if skippy < 0 ***REMOVED***
						return ErrInvalidLengthNamespace
					***REMOVED***
					if (iNdEx + skippy) > postIndex ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					iNdEx += skippy
				***REMOVED***
			***REMOVED***
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *GetNamespaceRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: GetNamespaceRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: GetNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *GetNamespaceResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: GetNamespaceResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: GetNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *ListNamespacesRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: ListNamespacesRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: ListNamespacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *ListNamespacesResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: ListNamespacesResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: ListNamespacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Namespaces = append(m.Namespaces, Namespace***REMOVED******REMOVED***)
			if err := m.Namespaces[len(m.Namespaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *CreateNamespaceRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: CreateNamespaceRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: CreateNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *CreateNamespaceResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: CreateNamespaceResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: CreateNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *UpdateNamespaceRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: UpdateNamespaceRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: UpdateNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.UpdateMask == nil ***REMOVED***
				m.UpdateMask = &google_protobuf2.FieldMask***REMOVED******REMOVED***
			***REMOVED***
			if err := m.UpdateMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *UpdateNamespaceResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: UpdateNamespaceResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: UpdateNamespaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Namespace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *DeleteNamespaceRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: DeleteNamespaceRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: DeleteNamespaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamespace(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthNamespace
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func skipNamespace(dAtA []byte) (n int, err error) ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return 0, ErrIntOverflowNamespace
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return 0, io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		wireType := int(wire & 0x7)
		switch wireType ***REMOVED***
		case 0:
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowNamespace
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			iNdEx += length
			if length < 0 ***REMOVED***
				return 0, ErrInvalidLengthNamespace
			***REMOVED***
			return iNdEx, nil
		case 3:
			for ***REMOVED***
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return 0, ErrIntOverflowNamespace
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return 0, io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 ***REMOVED***
					break
				***REMOVED***
				next, err := skipNamespace(dAtA[start:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				iNdEx = start + next
			***REMOVED***
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		***REMOVED***
	***REMOVED***
	panic("unreachable")
***REMOVED***

var (
	ErrInvalidLengthNamespace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamespace   = fmt.Errorf("proto: integer overflow")
)

func init() ***REMOVED***
	proto.RegisterFile("github.com/containerd/containerd/api/services/namespaces/v1/namespace.proto", fileDescriptorNamespace)
***REMOVED***

var fileDescriptorNamespace = []byte***REMOVED***
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0x24, 0xf9, 0x2c, 0xe5, 0x7a, 0xf3, 0x69, 0x08, 0x26, 0x32, 0x92, 0x09, 0x5e, 0x15,
	0xa9, 0x1a, 0xab, 0x41, 0x82, 0xfe, 0xec, 0x0a, 0x6d, 0x17, 0x14, 0x84, 0x2c, 0x21, 0x21, 0x58,
	0x80, 0x93, 0x4c, 0x5c, 0x13, 0xc7, 0x36, 0x9e, 0xb1, 0xa5, 0x88, 0x05, 0xbc, 0x0d, 0x1b, 0x1e,
	0x24, 0x4b, 0x96, 0xac, 0x50, 0x9b, 0x27, 0x41, 0x33, 0x76, 0xe2, 0xd0, 0x18, 0xe1, 0x06, 0xca,
	0xee, 0x5e, 0x7b, 0xce, 0x3d, 0x67, 0xae, 0xce, 0xb1, 0xe1, 0x89, 0xeb, 0xf1, 0xb3, 0xa4, 0x4f,
	0x06, 0xe1, 0xc4, 0x1a, 0x84, 0x01, 0x77, 0xbc, 0x80, 0xc6, 0xc3, 0xd5, 0xd2, 0x89, 0x3c, 0x8b,
	0xd1, 0x38, 0xf5, 0x06, 0x94, 0x59, 0x81, 0x33, 0xa1, 0x2c, 0x72, 0x44, 0x99, 0xee, 0x14, 0x1d,
	0x89, 0xe2, 0x90, 0x87, 0xf8, 0x6e, 0x01, 0x23, 0x0b, 0x08, 0x29, 0x20, 0x24, 0xdd, 0xd1, 0xdb,
	0x6e, 0xe8, 0x86, 0xf2, 0xb4, 0x25, 0xaa, 0x0c, 0xa8, 0xdf, 0x76, 0xc3, 0xd0, 0xf5, 0xa9, 0x25,
	0xbb, 0x7e, 0x32, 0xb2, 0xe8, 0x24, 0xe2, 0xd3, 0xfc, 0x65, 0xf7, 0xf2, 0xcb, 0x91, 0x47, 0xfd,
	0xe1, 0x9b, 0x89, 0xc3, 0xc6, 0xd9, 0x09, 0xf3, 0x0b, 0x82, 0xd6, 0xb3, 0x05, 0x0d, 0xc6, 0xd0,
	0x14, 0x9c, 0x1d, 0xd4, 0x45, 0x5b, 0x2d, 0x5b, 0xd6, 0xf8, 0x39, 0x28, 0xbe, 0xd3, 0xa7, 0x3e,
	0xeb, 0xd4, 0xbb, 0x8d, 0x2d, 0xb5, 0xb7, 0x4b, 0x7e, 0x2b, 0x95, 0x2c, 0x27, 0x92, 0x53, 0x09,
	0x3d, 0x0a, 0x78, 0x3c, 0xb5, 0xf3, 0x39, 0xfa, 0x1e, 0xa8, 0x2b, 0x8f, 0xf1, 0xff, 0xd0, 0x18,
	0xd3, 0x69, 0xce, 0x29, 0x4a, 0xdc, 0x86, 0xff, 0x52, 0xc7, 0x4f, 0x68, 0xa7, 0x2e, 0x9f, 0x65,
	0xcd, 0x7e, 0x7d, 0x17, 0x99, 0xf7, 0xe0, 0xc6, 0x09, 0xe5, 0xcb, 0xf1, 0x36, 0x7d, 0x9f, 0x50,
	0xc6, 0xcb, 0x74, 0x9b, 0x67, 0xd0, 0xfe, 0xf9, 0x28, 0x8b, 0xc2, 0x80, 0x89, 0xfb, 0xb4, 0x96,
	0x62, 0x25, 0x40, 0xed, 0x6d, 0x5f, 0xe5, 0x4a, 0x87, 0xcd, 0xd9, 0xf7, 0x3b, 0x35, 0xbb, 0x18,
	0x62, 0x5a, 0x70, 0xf3, 0xd4, 0x63, 0x05, 0x15, 0x5b, 0xc8, 0xd2, 0x40, 0x19, 0x79, 0x3e, 0xa7,
	0x71, 0x2e, 0x2c, 0xef, 0x4c, 0x1f, 0xb4, 0xcb, 0x80, 0x5c, 0x9c, 0x0d, 0x50, 0xd0, 0x76, 0x90,
	0x5c, 0xf8, 0x26, 0xea, 0x56, 0xa6, 0x98, 0xef, 0x40, 0x7b, 0x14, 0x53, 0x87, 0xd3, 0xb5, 0xb5,
	0xfd, 0xfd, 0x55, 0x8c, 0xe1, 0xd6, 0x1a, 0xd7, 0xb5, 0xed, 0xfd, 0x33, 0x02, 0xed, 0x45, 0x34,
	0xfc, 0x27, 0x37, 0xc3, 0x07, 0xa0, 0x26, 0x92, 0x4b, 0xa6, 0x47, 0x3a, 0x53, 0xed, 0xe9, 0x24,
	0x0b, 0x18, 0x59, 0x04, 0x8c, 0x1c, 0x8b, 0x80, 0x3d, 0x75, 0xd8, 0xd8, 0x86, 0xec, 0xb8, 0xa8,
	0xc5, 0x5a, 0xd6, 0x84, 0x5e, 0xdb, 0x5a, 0xb6, 0x41, 0x7b, 0x4c, 0x7d, 0x5a, 0xb2, 0x95, 0x92,
	0x98, 0xf4, 0xce, 0x9b, 0x00, 0x85, 0x11, 0x71, 0x0a, 0x8d, 0x13, 0xca, 0xf1, 0x83, 0x0a, 0x12,
	0x4a, 0x82, 0xa8, 0x3f, 0xbc, 0x32, 0x2e, 0x5f, 0xc3, 0x07, 0x68, 0x8a, 0x48, 0xe0, 0x2a, 0x5f,
	0x97, 0xd2, 0xb0, 0xe9, 0x7b, 0x1b, 0x20, 0x73, 0xf2, 0x8f, 0xa0, 0x64, 0xae, 0xc5, 0x55, 0x86,
	0x94, 0x87, 0x49, 0xdf, 0xdf, 0x04, 0x5a, 0x08, 0xc8, 0xfc, 0x51, 0x49, 0x40, 0xb9, 0xe7, 0x2b,
	0x09, 0xf8, 0x95, 0x0b, 0x5f, 0x83, 0x92, 0x79, 0xa6, 0x92, 0x80, 0x72, 0x7b, 0xe9, 0xda, 0x5a,
	0x1a, 0x8e, 0xc4, 0xbf, 0xe8, 0xf0, 0xed, 0xec, 0xc2, 0xa8, 0x7d, 0xbb, 0x30, 0x6a, 0x9f, 0xe6,
	0x06, 0x9a, 0xcd, 0x0d, 0xf4, 0x75, 0x6e, 0xa0, 0xf3, 0xb9, 0x81, 0x5e, 0x1d, 0xff, 0xc1, 0x2f,
	0xf4, 0xa0, 0xe8, 0x5e, 0xd6, 0xfa, 0x8a, 0xe4, 0xbc, 0xff, 0x23, 0x00, 0x00, 0xff, 0xff, 0x4f,
	0x4a, 0x87, 0xf3, 0x95, 0x07, 0x00, 0x00,
***REMOVED***
