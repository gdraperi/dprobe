// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/containerd/containerd/api/services/diff/v1/diff.proto

/*
	Package diff is a generated protocol buffer package.

	It is generated from these files:
		github.com/containerd/containerd/api/services/diff/v1/diff.proto

	It has these top-level messages:
		ApplyRequest
		ApplyResponse
		DiffRequest
		DiffResponse
*/
package diff

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"
import containerd_types "github.com/containerd/containerd/api/types"
import containerd_types1 "github.com/containerd/containerd/api/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ApplyRequest struct ***REMOVED***
	// Diff is the descriptor of the diff to be extracted
	Diff   *containerd_types1.Descriptor `protobuf:"bytes,1,opt,name=diff" json:"diff,omitempty"`
	Mounts []*containerd_types.Mount     `protobuf:"bytes,2,rep,name=mounts" json:"mounts,omitempty"`
***REMOVED***

func (m *ApplyRequest) Reset()                    ***REMOVED*** *m = ApplyRequest***REMOVED******REMOVED*** ***REMOVED***
func (*ApplyRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*ApplyRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorDiff, []int***REMOVED***0***REMOVED*** ***REMOVED***

type ApplyResponse struct ***REMOVED***
	// Applied is the descriptor for the object which was applied.
	// If the input was a compressed blob then the result will be
	// the descriptor for the uncompressed blob.
	Applied *containerd_types1.Descriptor `protobuf:"bytes,1,opt,name=applied" json:"applied,omitempty"`
***REMOVED***

func (m *ApplyResponse) Reset()                    ***REMOVED*** *m = ApplyResponse***REMOVED******REMOVED*** ***REMOVED***
func (*ApplyResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*ApplyResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorDiff, []int***REMOVED***1***REMOVED*** ***REMOVED***

type DiffRequest struct ***REMOVED***
	// Left are the mounts which represent the older copy
	// in which is the base of the computed changes.
	Left []*containerd_types.Mount `protobuf:"bytes,1,rep,name=left" json:"left,omitempty"`
	// Right are the mounts which represents the newer copy
	// in which changes from the left were made into.
	Right []*containerd_types.Mount `protobuf:"bytes,2,rep,name=right" json:"right,omitempty"`
	// MediaType is the media type descriptor for the created diff
	// object
	MediaType string `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// Ref identifies the pre-commit content store object. This
	// reference can be used to get the status from the content store.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// Labels are the labels to apply to the generated content
	// on content store commit.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
***REMOVED***

func (m *DiffRequest) Reset()                    ***REMOVED*** *m = DiffRequest***REMOVED******REMOVED*** ***REMOVED***
func (*DiffRequest) ProtoMessage()               ***REMOVED******REMOVED***
func (*DiffRequest) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorDiff, []int***REMOVED***2***REMOVED*** ***REMOVED***

type DiffResponse struct ***REMOVED***
	// Diff is the descriptor of the diff which can be applied
	Diff *containerd_types1.Descriptor `protobuf:"bytes,3,opt,name=diff" json:"diff,omitempty"`
***REMOVED***

func (m *DiffResponse) Reset()                    ***REMOVED*** *m = DiffResponse***REMOVED******REMOVED*** ***REMOVED***
func (*DiffResponse) ProtoMessage()               ***REMOVED******REMOVED***
func (*DiffResponse) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorDiff, []int***REMOVED***3***REMOVED*** ***REMOVED***

func init() ***REMOVED***
	proto.RegisterType((*ApplyRequest)(nil), "containerd.services.diff.v1.ApplyRequest")
	proto.RegisterType((*ApplyResponse)(nil), "containerd.services.diff.v1.ApplyResponse")
	proto.RegisterType((*DiffRequest)(nil), "containerd.services.diff.v1.DiffRequest")
	proto.RegisterType((*DiffResponse)(nil), "containerd.services.diff.v1.DiffResponse")
***REMOVED***

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Diff service

type DiffClient interface ***REMOVED***
	// Apply applies the content associated with the provided digests onto
	// the provided mounts. Archive content will be extracted and
	// decompressed if necessary.
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	// Diff creates a diff between the given mounts and uploads the result
	// to the content store.
	Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
***REMOVED***

type diffClient struct ***REMOVED***
	cc *grpc.ClientConn
***REMOVED***

func NewDiffClient(cc *grpc.ClientConn) DiffClient ***REMOVED***
	return &diffClient***REMOVED***cc***REMOVED***
***REMOVED***

func (c *diffClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) ***REMOVED***
	out := new(ApplyResponse)
	err := grpc.Invoke(ctx, "/containerd.services.diff.v1.Diff/Apply", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

func (c *diffClient) Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) ***REMOVED***
	out := new(DiffResponse)
	err := grpc.Invoke(ctx, "/containerd.services.diff.v1.Diff/Diff", in, out, c.cc, opts...)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return out, nil
***REMOVED***

// Server API for Diff service

type DiffServer interface ***REMOVED***
	// Apply applies the content associated with the provided digests onto
	// the provided mounts. Archive content will be extracted and
	// decompressed if necessary.
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	// Diff creates a diff between the given mounts and uploads the result
	// to the content store.
	Diff(context.Context, *DiffRequest) (*DiffResponse, error)
***REMOVED***

func RegisterDiffServer(s *grpc.Server, srv DiffServer) ***REMOVED***
	s.RegisterService(&_Diff_serviceDesc, srv)
***REMOVED***

func _Diff_Apply_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(ApplyRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(DiffServer).Apply(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.diff.v1.Diff/Apply",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(DiffServer).Apply(ctx, req.(*ApplyRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

func _Diff_Diff_Handler(srv interface***REMOVED******REMOVED***, ctx context.Context, dec func(interface***REMOVED******REMOVED***) error, interceptor grpc.UnaryServerInterceptor) (interface***REMOVED******REMOVED***, error) ***REMOVED***
	in := new(DiffRequest)
	if err := dec(in); err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	if interceptor == nil ***REMOVED***
		return srv.(DiffServer).Diff(ctx, in)
	***REMOVED***
	info := &grpc.UnaryServerInfo***REMOVED***
		Server:     srv,
		FullMethod: "/containerd.services.diff.v1.Diff/Diff",
	***REMOVED***
	handler := func(ctx context.Context, req interface***REMOVED******REMOVED***) (interface***REMOVED******REMOVED***, error) ***REMOVED***
		return srv.(DiffServer).Diff(ctx, req.(*DiffRequest))
	***REMOVED***
	return interceptor(ctx, in, info, handler)
***REMOVED***

var _Diff_serviceDesc = grpc.ServiceDesc***REMOVED***
	ServiceName: "containerd.services.diff.v1.Diff",
	HandlerType: (*DiffServer)(nil),
	Methods: []grpc.MethodDesc***REMOVED***
		***REMOVED***
			MethodName: "Apply",
			Handler:    _Diff_Apply_Handler,
		***REMOVED***,
		***REMOVED***
			MethodName: "Diff",
			Handler:    _Diff_Diff_Handler,
		***REMOVED***,
	***REMOVED***,
	Streams:  []grpc.StreamDesc***REMOVED******REMOVED***,
	Metadata: "github.com/containerd/containerd/api/services/diff/v1/diff.proto",
***REMOVED***

func (m *ApplyRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *ApplyRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Diff != nil ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiff(dAtA, i, uint64(m.Diff.Size()))
		n1, err := m.Diff.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n1
	***REMOVED***
	if len(m.Mounts) > 0 ***REMOVED***
		for _, msg := range m.Mounts ***REMOVED***
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiff(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *ApplyResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *ApplyResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Applied != nil ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintDiff(dAtA, i, uint64(m.Applied.Size()))
		n2, err := m.Applied.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n2
	***REMOVED***
	return i, nil
***REMOVED***

func (m *DiffRequest) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *DiffRequest) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Left) > 0 ***REMOVED***
		for _, msg := range m.Left ***REMOVED***
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiff(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	if len(m.Right) > 0 ***REMOVED***
		for _, msg := range m.Right ***REMOVED***
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiff(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	if len(m.MediaType) > 0 ***REMOVED***
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.MediaType)))
		i += copy(dAtA[i:], m.MediaType)
	***REMOVED***
	if len(m.Ref) > 0 ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintDiff(dAtA, i, uint64(len(m.Ref)))
		i += copy(dAtA[i:], m.Ref)
	***REMOVED***
	if len(m.Labels) > 0 ***REMOVED***
		for k, _ := range m.Labels ***REMOVED***
			dAtA[i] = 0x2a
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovDiff(uint64(len(k))) + 1 + len(v) + sovDiff(uint64(len(v)))
			i = encodeVarintDiff(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiff(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiff(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *DiffResponse) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *DiffResponse) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Diff != nil ***REMOVED***
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDiff(dAtA, i, uint64(m.Diff.Size()))
		n3, err := m.Diff.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n3
	***REMOVED***
	return i, nil
***REMOVED***

func encodeVarintDiff(dAtA []byte, offset int, v uint64) int ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	***REMOVED***
	dAtA[offset] = uint8(v)
	return offset + 1
***REMOVED***
func (m *ApplyRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Diff != nil ***REMOVED***
		l = m.Diff.Size()
		n += 1 + l + sovDiff(uint64(l))
	***REMOVED***
	if len(m.Mounts) > 0 ***REMOVED***
		for _, e := range m.Mounts ***REMOVED***
			l = e.Size()
			n += 1 + l + sovDiff(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *ApplyResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Applied != nil ***REMOVED***
		l = m.Applied.Size()
		n += 1 + l + sovDiff(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *DiffRequest) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if len(m.Left) > 0 ***REMOVED***
		for _, e := range m.Left ***REMOVED***
			l = e.Size()
			n += 1 + l + sovDiff(uint64(l))
		***REMOVED***
	***REMOVED***
	if len(m.Right) > 0 ***REMOVED***
		for _, e := range m.Right ***REMOVED***
			l = e.Size()
			n += 1 + l + sovDiff(uint64(l))
		***REMOVED***
	***REMOVED***
	l = len(m.MediaType)
	if l > 0 ***REMOVED***
		n += 1 + l + sovDiff(uint64(l))
	***REMOVED***
	l = len(m.Ref)
	if l > 0 ***REMOVED***
		n += 1 + l + sovDiff(uint64(l))
	***REMOVED***
	if len(m.Labels) > 0 ***REMOVED***
		for k, v := range m.Labels ***REMOVED***
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiff(uint64(len(k))) + 1 + len(v) + sovDiff(uint64(len(v)))
			n += mapEntrySize + 1 + sovDiff(uint64(mapEntrySize))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *DiffResponse) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Diff != nil ***REMOVED***
		l = m.Diff.Size()
		n += 1 + l + sovDiff(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func sovDiff(x uint64) (n int) ***REMOVED***
	for ***REMOVED***
		n++
		x >>= 7
		if x == 0 ***REMOVED***
			break
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***
func sozDiff(x uint64) (n int) ***REMOVED***
	return sovDiff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
***REMOVED***
func (this *ApplyRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&ApplyRequest***REMOVED***`,
		`Diff:` + strings.Replace(fmt.Sprintf("%v", this.Diff), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
		`Mounts:` + strings.Replace(fmt.Sprintf("%v", this.Mounts), "Mount", "containerd_types.Mount", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *ApplyResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&ApplyResponse***REMOVED***`,
		`Applied:` + strings.Replace(fmt.Sprintf("%v", this.Applied), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *DiffRequest) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels ***REMOVED***
		keysForLabels = append(keysForLabels, k)
	***REMOVED***
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string***REMOVED***"
	for _, k := range keysForLabels ***REMOVED***
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	***REMOVED***
	mapStringForLabels += "***REMOVED***"
	s := strings.Join([]string***REMOVED***`&DiffRequest***REMOVED***`,
		`Left:` + strings.Replace(fmt.Sprintf("%v", this.Left), "Mount", "containerd_types.Mount", 1) + `,`,
		`Right:` + strings.Replace(fmt.Sprintf("%v", this.Right), "Mount", "containerd_types.Mount", 1) + `,`,
		`MediaType:` + fmt.Sprintf("%v", this.MediaType) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *DiffResponse) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&DiffResponse***REMOVED***`,
		`Diff:` + strings.Replace(fmt.Sprintf("%v", this.Diff), "Descriptor", "containerd_types1.Descriptor", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func valueToStringDiff(v interface***REMOVED******REMOVED***) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
***REMOVED***
func (m *ApplyRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowDiff
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: ApplyRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: ApplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Diff", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Diff == nil ***REMOVED***
				m.Diff = &containerd_types1.Descriptor***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Diff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Mounts", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Mounts = append(m.Mounts, &containerd_types.Mount***REMOVED******REMOVED***)
			if err := m.Mounts[len(m.Mounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *ApplyResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowDiff
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: ApplyResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: ApplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Applied == nil ***REMOVED***
				m.Applied = &containerd_types1.Descriptor***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Applied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *DiffRequest) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowDiff
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: DiffRequest: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: DiffRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Left = append(m.Left, &containerd_types.Mount***REMOVED******REMOVED***)
			if err := m.Left[len(m.Left)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Right = append(m.Right, &containerd_types.Mount***REMOVED******REMOVED***)
			if err := m.Right[len(m.Right)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field MediaType", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.MediaType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Labels == nil ***REMOVED***
				m.Labels = make(map[string]string)
			***REMOVED***
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex ***REMOVED***
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowDiff
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 ***REMOVED***
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 ***REMOVED***
						if shift >= 64 ***REMOVED***
							return ErrIntOverflowDiff
						***REMOVED***
						if iNdEx >= l ***REMOVED***
							return io.ErrUnexpectedEOF
						***REMOVED***
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 ***REMOVED***
							break
						***REMOVED***
					***REMOVED***
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 ***REMOVED***
						return ErrInvalidLengthDiff
					***REMOVED***
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				***REMOVED*** else if fieldNum == 2 ***REMOVED***
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 ***REMOVED***
						if shift >= 64 ***REMOVED***
							return ErrIntOverflowDiff
						***REMOVED***
						if iNdEx >= l ***REMOVED***
							return io.ErrUnexpectedEOF
						***REMOVED***
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 ***REMOVED***
							break
						***REMOVED***
					***REMOVED***
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 ***REMOVED***
						return ErrInvalidLengthDiff
					***REMOVED***
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				***REMOVED*** else ***REMOVED***
					iNdEx = entryPreIndex
					skippy, err := skipDiff(dAtA[iNdEx:])
					if err != nil ***REMOVED***
						return err
					***REMOVED***
					if skippy < 0 ***REMOVED***
						return ErrInvalidLengthDiff
					***REMOVED***
					if (iNdEx + skippy) > postIndex ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					iNdEx += skippy
				***REMOVED***
			***REMOVED***
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *DiffResponse) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowDiff
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: DiffResponse: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: DiffResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Diff", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Diff == nil ***REMOVED***
				m.Diff = &containerd_types1.Descriptor***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Diff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiff(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthDiff
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func skipDiff(dAtA []byte) (n int, err error) ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return 0, ErrIntOverflowDiff
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return 0, io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		wireType := int(wire & 0x7)
		switch wireType ***REMOVED***
		case 0:
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowDiff
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			iNdEx += length
			if length < 0 ***REMOVED***
				return 0, ErrInvalidLengthDiff
			***REMOVED***
			return iNdEx, nil
		case 3:
			for ***REMOVED***
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return 0, ErrIntOverflowDiff
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return 0, io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 ***REMOVED***
					break
				***REMOVED***
				next, err := skipDiff(dAtA[start:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				iNdEx = start + next
			***REMOVED***
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		***REMOVED***
	***REMOVED***
	panic("unreachable")
***REMOVED***

var (
	ErrInvalidLengthDiff = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiff   = fmt.Errorf("proto: integer overflow")
)

func init() ***REMOVED***
	proto.RegisterFile("github.com/containerd/containerd/api/services/diff/v1/diff.proto", fileDescriptorDiff)
***REMOVED***

var fileDescriptorDiff = []byte***REMOVED***
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0xaf, 0xfb, 0x0f, 0xf5, 0x75, 0x48, 0xc8, 0x9a, 0x44, 0x14, 0x20, 0xaa, 0x7a, 0xea, 0x40,
	0x38, 0xac, 0xa0, 0x09, 0xb6, 0xcb, 0x40, 0x43, 0x5c, 0xc6, 0x25, 0xda, 0x01, 0x81, 0x04, 0x4a,
	0x9b, 0x97, 0xce, 0x22, 0x8d, 0xbd, 0xd8, 0xad, 0x94, 0x1b, 0xdf, 0x85, 0x8f, 0xc2, 0x65, 0x47,
	0x8e, 0x1c, 0x69, 0x3f, 0x09, 0xb2, 0x93, 0x40, 0x24, 0xa4, 0x12, 0x76, 0xca, 0xcb, 0xf3, 0xef,
	0x9f, 0xfd, 0x6c, 0x38, 0x5d, 0x70, 0x7d, 0xb9, 0x9a, 0xb1, 0xb9, 0x58, 0xfa, 0x73, 0x91, 0xea,
	0x90, 0xa7, 0x98, 0x45, 0xf5, 0x32, 0x94, 0xdc, 0x57, 0x98, 0xad, 0xf9, 0x1c, 0x95, 0x1f, 0xf1,
	0x38, 0xf6, 0xd7, 0x87, 0xf6, 0xcb, 0x64, 0x26, 0xb4, 0xa0, 0xf7, 0xfe, 0x60, 0x59, 0x85, 0x63,
	0x76, 0x7d, 0x7d, 0xe8, 0xee, 0x2f, 0xc4, 0x42, 0x58, 0x9c, 0x6f, 0xaa, 0x82, 0xe2, 0x1e, 0x35,
	0x32, 0xd5, 0xb9, 0x44, 0xe5, 0x2f, 0xc5, 0x2a, 0xd5, 0x25, 0xef, 0xe4, 0x3f, 0x78, 0x11, 0xaa,
	0x79, 0xc6, 0xa5, 0x16, 0x59, 0x41, 0x1e, 0x5f, 0xc1, 0xde, 0x4b, 0x29, 0x93, 0x3c, 0xc0, 0xab,
	0x15, 0x2a, 0x4d, 0x9f, 0x40, 0xd7, 0xa4, 0x74, 0xc8, 0x88, 0x4c, 0x86, 0xd3, 0xfb, 0xac, 0xb6,
	0x0d, 0xab, 0xc0, 0xce, 0x7e, 0x2b, 0x04, 0x16, 0x49, 0x7d, 0xe8, 0xdb, 0x34, 0xca, 0x69, 0x8f,
	0x3a, 0x93, 0xe1, 0xf4, 0xee, 0xdf, 0x9c, 0xb7, 0x66, 0x3d, 0x28, 0x61, 0xe3, 0x37, 0x70, 0xbb,
	0xb4, 0x54, 0x52, 0xa4, 0x0a, 0xe9, 0x11, 0xdc, 0x0a, 0xa5, 0x4c, 0x38, 0x46, 0x8d, 0x6c, 0x2b,
	0xf0, 0xf8, 0x6b, 0x1b, 0x86, 0x67, 0x3c, 0x8e, 0xab, 0xec, 0x8f, 0xa0, 0x9b, 0x60, 0xac, 0x1d,
	0xb2, 0x3b, 0x87, 0x05, 0xd1, 0xc7, 0xd0, 0xcb, 0xf8, 0xe2, 0x52, 0xff, 0x2b, 0x75, 0x81, 0xa2,
	0x0f, 0x00, 0x96, 0x18, 0xf1, 0xf0, 0x93, 0x59, 0x73, 0x3a, 0x23, 0x32, 0x19, 0x04, 0x03, 0xdb,
	0xb9, 0xc8, 0x25, 0xd2, 0x3b, 0xd0, 0xc9, 0x30, 0x76, 0xba, 0xb6, 0x6f, 0x4a, 0x7a, 0x0e, 0xfd,
	0x24, 0x9c, 0x61, 0xa2, 0x9c, 0x9e, 0x35, 0x78, 0xc6, 0x76, 0xdc, 0x08, 0x56, 0xdb, 0x06, 0x3b,
	0xb7, 0xb4, 0xd7, 0xa9, 0xce, 0xf2, 0xa0, 0xd4, 0x70, 0x5f, 0xc0, 0xb0, 0xd6, 0x36, 0x76, 0x9f,
	0x31, 0xb7, 0xa7, 0x35, 0x08, 0x4c, 0x49, 0xf7, 0xa1, 0xb7, 0x0e, 0x93, 0x15, 0x3a, 0x6d, 0xdb,
	0x2b, 0x7e, 0x8e, 0xdb, 0xcf, 0xc9, 0xf8, 0x14, 0xf6, 0x0a, 0xf5, 0xf2, 0xb4, 0xab, 0x09, 0x77,
	0x9a, 0x4e, 0x78, 0xfa, 0x8d, 0x40, 0xd7, 0x48, 0xd0, 0x8f, 0xd0, 0xb3, 0x93, 0xa3, 0x07, 0x3b,
	0x37, 0x53, 0xbf, 0x50, 0xee, 0xc3, 0x26, 0xd0, 0x32, 0xda, 0x87, 0xd2, 0x67, 0xd2, 0xf4, 0xac,
	0xdc, 0x83, 0x06, 0xc8, 0x42, 0xfc, 0xd5, 0xc5, 0xf5, 0xc6, 0x6b, 0xfd, 0xd8, 0x78, 0xad, 0x2f,
	0x5b, 0x8f, 0x5c, 0x6f, 0x3d, 0xf2, 0x7d, 0xeb, 0x91, 0x9f, 0x5b, 0x8f, 0xbc, 0x3f, 0xbe, 0xd1,
	0x6b, 0x3f, 0x31, 0xdf, 0x77, 0xad, 0x59, 0xdf, 0x3e, 0xa4, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x61, 0xd1, 0x6e, 0x9e, 0x34, 0x04, 0x00, 0x00,
***REMOVED***
