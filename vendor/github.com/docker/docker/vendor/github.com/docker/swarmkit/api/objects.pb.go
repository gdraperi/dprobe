// Code generated by protoc-gen-gogo.
// source: github.com/docker/swarmkit/api/objects.proto
// DO NOT EDIT!

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/gogoproto"
import google_protobuf3 "github.com/gogo/protobuf/types"
import _ "github.com/docker/swarmkit/protobuf/plugin"

import github_com_docker_swarmkit_api_deepcopy "github.com/docker/swarmkit/api/deepcopy"

import github_com_docker_go_events "github.com/docker/go-events"
import strings "strings"

import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Meta contains metadata about objects. Every object contains a meta field.
type Meta struct ***REMOVED***
	// Version tracks the current version of the object.
	Version Version `protobuf:"bytes,1,opt,name=version" json:"version"`
	// Object timestamps.
	// Note: can't use stdtime because these fields are nullable.
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
***REMOVED***

func (m *Meta) Reset()                    ***REMOVED*** *m = Meta***REMOVED******REMOVED*** ***REMOVED***
func (*Meta) ProtoMessage()               ***REMOVED******REMOVED***
func (*Meta) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***0***REMOVED*** ***REMOVED***

// Node provides the internal node state as seen by the cluster.
type Node struct ***REMOVED***
	// ID specifies the identity of the node.
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta   `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	// Spec defines the desired state of the node as specified by the user.
	// The system will honor this and will *never* modify it.
	Spec NodeSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// Description encapsulated the properties of the Node as reported by the
	// agent.
	Description *NodeDescription `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// Status provides the current status of the node, as seen by the manager.
	Status NodeStatus `protobuf:"bytes,5,opt,name=status" json:"status"`
	// ManagerStatus provides the current status of the node's manager
	// component, if the node is a manager.
	ManagerStatus *ManagerStatus `protobuf:"bytes,6,opt,name=manager_status,json=managerStatus" json:"manager_status,omitempty"`
	// DEPRECATED: Use lb_attachments to find the ingress network
	// The node attachment to the ingress network.
	Attachment *NetworkAttachment `protobuf:"bytes,7,opt,name=attachment" json:"attachment,omitempty"`
	// Certificate is the TLS certificate issued for the node, if any.
	Certificate Certificate `protobuf:"bytes,8,opt,name=certificate" json:"certificate"`
	// Role is the *observed* role for this node. It differs from the
	// desired role set in Node.Spec.Role because the role here is only
	// updated after the Raft member list has been reconciled with the
	// desired role from the spec.
	//
	// This field represents the current reconciled state. If an action is
	// to be performed, first verify the role in the cert. This field only
	// shows the privilege level that the CA would currently grant when
	// issuing or renewing the node's certificate.
	Role NodeRole `protobuf:"varint,9,opt,name=role,proto3,enum=docker.swarmkit.v1.NodeRole" json:"role,omitempty"`
	// Attachments enumerates the network attachments for the node to set up an
	// endpoint on the node to be used for load balancing. Each overlay
	// network, including ingress network, will have an NetworkAttachment.
	Attachments []*NetworkAttachment `protobuf:"bytes,10,rep,name=attachments" json:"attachments,omitempty"`
***REMOVED***

func (m *Node) Reset()                    ***REMOVED*** *m = Node***REMOVED******REMOVED*** ***REMOVED***
func (*Node) ProtoMessage()               ***REMOVED******REMOVED***
func (*Node) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***1***REMOVED*** ***REMOVED***

type Service struct ***REMOVED***
	ID   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	Spec ServiceSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// SpecVersion versions Spec, to identify changes in the spec. Note that
	// this is not directly comparable to the service's Version.
	SpecVersion *Version `protobuf:"bytes,10,opt,name=spec_version,json=specVersion" json:"spec_version,omitempty"`
	// PreviousSpec is the previous service spec that was in place before
	// "Spec".
	PreviousSpec *ServiceSpec `protobuf:"bytes,6,opt,name=previous_spec,json=previousSpec" json:"previous_spec,omitempty"`
	// PreviousSpecVersion versions PreviousSpec. Note that this is not
	// directly comparable to the service's Version.
	PreviousSpecVersion *Version `protobuf:"bytes,11,opt,name=previous_spec_version,json=previousSpecVersion" json:"previous_spec_version,omitempty"`
	// Runtime state of service endpoint. This may be different
	// from the spec version because the user may not have entered
	// the optional fields like node_port or virtual_ip and it
	// could be auto allocated by the system.
	Endpoint *Endpoint `protobuf:"bytes,4,opt,name=endpoint" json:"endpoint,omitempty"`
	// UpdateStatus contains the status of an update, if one is in
	// progress.
	UpdateStatus *UpdateStatus `protobuf:"bytes,5,opt,name=update_status,json=updateStatus" json:"update_status,omitempty"`
***REMOVED***

func (m *Service) Reset()                    ***REMOVED*** *m = Service***REMOVED******REMOVED*** ***REMOVED***
func (*Service) ProtoMessage()               ***REMOVED******REMOVED***
func (*Service) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***2***REMOVED*** ***REMOVED***

// Endpoint specified all the network parameters required to
// correctly discover and load balance a service
type Endpoint struct ***REMOVED***
	Spec *EndpointSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	// Runtime state of the exposed ports which may carry
	// auto-allocated swarm ports in addition to the user
	// configured information.
	Ports []*PortConfig `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
	// VirtualIPs specifies the IP addresses under which this endpoint will be
	// made available.
	VirtualIPs []*Endpoint_VirtualIP `protobuf:"bytes,3,rep,name=virtual_ips,json=virtualIps" json:"virtual_ips,omitempty"`
***REMOVED***

func (m *Endpoint) Reset()                    ***REMOVED*** *m = Endpoint***REMOVED******REMOVED*** ***REMOVED***
func (*Endpoint) ProtoMessage()               ***REMOVED******REMOVED***
func (*Endpoint) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***3***REMOVED*** ***REMOVED***

// VirtualIP specifies a set of networks this endpoint will be attached to
// and the IP addresses the target service will be made available under.
type Endpoint_VirtualIP struct ***REMOVED***
	// NetworkID for which this endpoint attachment was created.
	NetworkID string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// A virtual IP is used to address this service in IP
	// layer that the client can use to send requests to
	// this service. A DNS A/AAAA query on the service
	// name might return this IP to the client. This is
	// strictly a logical IP and there may not be any
	// interfaces assigned this IP address or any route
	// created for this address.  More than one to
	// accommodate for both IPv4 and IPv6
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
***REMOVED***

func (m *Endpoint_VirtualIP) Reset()                    ***REMOVED*** *m = Endpoint_VirtualIP***REMOVED******REMOVED*** ***REMOVED***
func (*Endpoint_VirtualIP) ProtoMessage()               ***REMOVED******REMOVED***
func (*Endpoint_VirtualIP) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***3, 0***REMOVED*** ***REMOVED***

// Task specifies the parameters for implementing a Spec. A task is effectively
// immutable and idempotent. Once it is dispatched to a node, it will not be
// dispatched to another node.
type Task struct ***REMOVED***
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta   `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	// Spec defines the desired state of the task as specified by the user.
	// The system will honor this and will *never* modify it.
	Spec TaskSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// SpecVersion is copied from Service, to identify which version of the
	// spec this task has. Note that this is not directly comparable to the
	// service's Version.
	SpecVersion *Version `protobuf:"bytes,14,opt,name=spec_version,json=specVersion" json:"spec_version,omitempty"`
	// ServiceID indicates the service under which this task is orchestrated. This
	// should almost always be set.
	ServiceID string `protobuf:"bytes,4,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Slot is the service slot number for a task.
	// For example, if a replicated service has replicas = 2, there will be a
	// task with slot = 1, and another with slot = 2.
	Slot uint64 `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"`
	// NodeID indicates the node to which the task is assigned. If this field
	// is empty or not set, the task is unassigned.
	NodeID string `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Annotations defines the names and labels for the runtime, as set by
	// the cluster manager.
	//
	// As backup, if this field has an empty name, the runtime will
	// allocate a unique name for the actual container.
	//
	// NOTE(stevvooe): The preserves the ability for us to making naming
	// decisions for tasks in orchestrator, albeit, this is left empty for now.
	Annotations Annotations `protobuf:"bytes,7,opt,name=annotations" json:"annotations"`
	// ServiceAnnotations is a direct copy of the service name and labels when
	// this task is created.
	//
	// Labels set here will *not* be propagated to the runtime target, such as a
	// container. Use labels on the runtime target for that purpose.
	ServiceAnnotations Annotations `protobuf:"bytes,8,opt,name=service_annotations,json=serviceAnnotations" json:"service_annotations"`
	Status             TaskStatus  `protobuf:"bytes,9,opt,name=status" json:"status"`
	// DesiredState is the target state for the task. It is set to
	// TaskStateRunning when a task is first created, and changed to
	// TaskStateShutdown if the manager wants to terminate the task. This field
	// is only written by the manager.
	DesiredState TaskState `protobuf:"varint,10,opt,name=desired_state,json=desiredState,proto3,enum=docker.swarmkit.v1.TaskState" json:"desired_state,omitempty"`
	// List of network attachments by the task.
	Networks []*NetworkAttachment `protobuf:"bytes,11,rep,name=networks" json:"networks,omitempty"`
	// A copy of runtime state of service endpoint from Service
	// object to be distributed to agents as part of the task.
	Endpoint *Endpoint `protobuf:"bytes,12,opt,name=endpoint" json:"endpoint,omitempty"`
	// LogDriver specifies the selected log driver to use for the task. Agent
	// processes should always favor the value in this field.
	//
	// If present in the TaskSpec, this will be a copy of that value. The
	// orchestrator may choose to insert a value here, which should be honored,
	// such a cluster default or policy-based value.
	//
	// If not present, the daemon's default will be used.
	LogDriver                *Driver            `protobuf:"bytes,13,opt,name=log_driver,json=logDriver" json:"log_driver,omitempty"`
	AssignedGenericResources []*GenericResource `protobuf:"bytes,15,rep,name=assigned_generic_resources,json=assignedGenericResources" json:"assigned_generic_resources,omitempty"`
***REMOVED***

func (m *Task) Reset()                    ***REMOVED*** *m = Task***REMOVED******REMOVED*** ***REMOVED***
func (*Task) ProtoMessage()               ***REMOVED******REMOVED***
func (*Task) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***4***REMOVED*** ***REMOVED***

// NetworkAttachment specifies the network parameters of attachment to
// a single network by an object such as task or node.
type NetworkAttachment struct ***REMOVED***
	// Network state as a whole becomes part of the object so that
	// it always is available for use in agents so that agents
	// don't have any other dependency during execution.
	Network *Network `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	// List of IPv4/IPv6 addresses that are assigned to the object
	// as part of getting attached to this network.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
	// List of aliases by which a task is resolved in a network
	Aliases []string `protobuf:"bytes,3,rep,name=aliases" json:"aliases,omitempty"`
	// Map of all the driver attachment options for this network
	DriverAttachmentOpts map[string]string `protobuf:"bytes,4,rep,name=driver_attachment_opts,json=driverAttachmentOpts" json:"driver_attachment_opts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
***REMOVED***

func (m *NetworkAttachment) Reset()                    ***REMOVED*** *m = NetworkAttachment***REMOVED******REMOVED*** ***REMOVED***
func (*NetworkAttachment) ProtoMessage()               ***REMOVED******REMOVED***
func (*NetworkAttachment) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***5***REMOVED*** ***REMOVED***

type Network struct ***REMOVED***
	ID   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	Spec NetworkSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// Driver specific operational state provided by the network driver.
	DriverState *Driver `protobuf:"bytes,4,opt,name=driver_state,json=driverState" json:"driver_state,omitempty"`
	// Runtime state of IPAM options. This may not reflect the
	// ipam options from NetworkSpec.
	IPAM *IPAMOptions `protobuf:"bytes,5,opt,name=ipam" json:"ipam,omitempty"`
***REMOVED***

func (m *Network) Reset()                    ***REMOVED*** *m = Network***REMOVED******REMOVED*** ***REMOVED***
func (*Network) ProtoMessage()               ***REMOVED******REMOVED***
func (*Network) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***6***REMOVED*** ***REMOVED***

// Cluster provides global cluster settings.
type Cluster struct ***REMOVED***
	ID   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	Spec ClusterSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// RootCA contains key material for the root CA.
	RootCA RootCA `protobuf:"bytes,4,opt,name=root_ca,json=rootCa" json:"root_ca"`
	// Symmetric encryption key distributed by the lead manager. Used by agents
	// for securing network bootstrapping and communication.
	NetworkBootstrapKeys []*EncryptionKey `protobuf:"bytes,5,rep,name=network_bootstrap_keys,json=networkBootstrapKeys" json:"network_bootstrap_keys,omitempty"`
	// Logical clock used to timestamp every key.  It allows other managers
	// and agents to unambiguously identify the older key to be deleted when
	// a new key is allocated on key rotation.
	EncryptionKeyLamportClock uint64 `protobuf:"varint,6,opt,name=encryption_key_lamport_clock,json=encryptionKeyLamportClock,proto3" json:"encryption_key_lamport_clock,omitempty"`
	// BlacklistedCertificates tracks certificates that should no longer
	// be honored. It's a mapping from CN -> BlacklistedCertificate.
	// swarm. Their certificates should effectively be blacklisted.
	BlacklistedCertificates map[string]*BlacklistedCertificate `protobuf:"bytes,8,rep,name=blacklisted_certificates,json=blacklistedCertificates" json:"blacklisted_certificates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	// UnlockKeys defines the keys that lock node data at rest.  For example,
	// this would contain the key encrypting key (KEK) that will encrypt the
	// manager TLS keys at rest and the raft encryption keys at rest.
	// If the key is empty, the node will be unlocked (will not require a key
	// to start up from a shut down state).
	UnlockKeys []*EncryptionKey `protobuf:"bytes,9,rep,name=unlock_keys,json=unlockKeys" json:"unlock_keys,omitempty"`
***REMOVED***

func (m *Cluster) Reset()                    ***REMOVED*** *m = Cluster***REMOVED******REMOVED*** ***REMOVED***
func (*Cluster) ProtoMessage()               ***REMOVED******REMOVED***
func (*Cluster) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***7***REMOVED*** ***REMOVED***

// Secret represents a secret that should be passed to a container or a node,
// and is immutable.
type Secret struct ***REMOVED***
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta   `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	// Spec contains the actual secret data, as well as any context around the
	// secret data that the user provides.
	Spec SecretSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
	// Whether the secret is an internal secret (not set by a user) or not.
	Internal bool `protobuf:"varint,4,opt,name=internal,proto3" json:"internal,omitempty"`
***REMOVED***

func (m *Secret) Reset()                    ***REMOVED*** *m = Secret***REMOVED******REMOVED*** ***REMOVED***
func (*Secret) ProtoMessage()               ***REMOVED******REMOVED***
func (*Secret) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***8***REMOVED*** ***REMOVED***

// Config represents a set of configuration files that should be passed to a
// container.
type Config struct ***REMOVED***
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta Meta   `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	// Spec contains the actual config data, as well as any context around the
	// config data that the user provides.
	Spec ConfigSpec `protobuf:"bytes,3,opt,name=spec" json:"spec"`
***REMOVED***

func (m *Config) Reset()                    ***REMOVED*** *m = Config***REMOVED******REMOVED*** ***REMOVED***
func (*Config) ProtoMessage()               ***REMOVED******REMOVED***
func (*Config) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***9***REMOVED*** ***REMOVED***

// Resource is a top-level object with externally defined content and indexing.
// SwarmKit can serve as a store for these objects without understanding their
// meanings.
type Resource struct ***REMOVED***
	ID          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta        Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	Annotations Annotations `protobuf:"bytes,3,opt,name=annotations" json:"annotations"`
	// Kind identifies this class of object. It is essentially a namespace
	// to keep IDs or indices from colliding between unrelated Resource
	// objects. This must correspond to the name of an Extension.
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Payload bytes. This data is not interpreted in any way by SwarmKit.
	// By convention, it should be a marshalled protocol buffers message.
	Payload *google_protobuf3.Any `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
***REMOVED***

func (m *Resource) Reset()                    ***REMOVED*** *m = Resource***REMOVED******REMOVED*** ***REMOVED***
func (*Resource) ProtoMessage()               ***REMOVED******REMOVED***
func (*Resource) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***10***REMOVED*** ***REMOVED***

// Extension declares a type of "resource" object. This message provides some
// metadata about the objects.
type Extension struct ***REMOVED***
	ID          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Meta        Meta        `protobuf:"bytes,2,opt,name=meta" json:"meta"`
	Annotations Annotations `protobuf:"bytes,3,opt,name=annotations" json:"annotations"`
	Description string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
***REMOVED***

func (m *Extension) Reset()                    ***REMOVED*** *m = Extension***REMOVED******REMOVED*** ***REMOVED***
func (*Extension) ProtoMessage()               ***REMOVED******REMOVED***
func (*Extension) Descriptor() ([]byte, []int) ***REMOVED*** return fileDescriptorObjects, []int***REMOVED***11***REMOVED*** ***REMOVED***

func init() ***REMOVED***
	proto.RegisterType((*Meta)(nil), "docker.swarmkit.v1.Meta")
	proto.RegisterType((*Node)(nil), "docker.swarmkit.v1.Node")
	proto.RegisterType((*Service)(nil), "docker.swarmkit.v1.Service")
	proto.RegisterType((*Endpoint)(nil), "docker.swarmkit.v1.Endpoint")
	proto.RegisterType((*Endpoint_VirtualIP)(nil), "docker.swarmkit.v1.Endpoint.VirtualIP")
	proto.RegisterType((*Task)(nil), "docker.swarmkit.v1.Task")
	proto.RegisterType((*NetworkAttachment)(nil), "docker.swarmkit.v1.NetworkAttachment")
	proto.RegisterType((*Network)(nil), "docker.swarmkit.v1.Network")
	proto.RegisterType((*Cluster)(nil), "docker.swarmkit.v1.Cluster")
	proto.RegisterType((*Secret)(nil), "docker.swarmkit.v1.Secret")
	proto.RegisterType((*Config)(nil), "docker.swarmkit.v1.Config")
	proto.RegisterType((*Resource)(nil), "docker.swarmkit.v1.Resource")
	proto.RegisterType((*Extension)(nil), "docker.swarmkit.v1.Extension")
***REMOVED***

func (m *Meta) Copy() *Meta ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Meta***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Meta) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Meta)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Version, &o.Version)
	if o.CreatedAt != nil ***REMOVED***
		m.CreatedAt = &google_protobuf.Timestamp***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.CreatedAt, o.CreatedAt)
	***REMOVED***
	if o.UpdatedAt != nil ***REMOVED***
		m.UpdatedAt = &google_protobuf.Timestamp***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.UpdatedAt, o.UpdatedAt)
	***REMOVED***
***REMOVED***

func (m *Node) Copy() *Node ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Node***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Node) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Node)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
	if o.Description != nil ***REMOVED***
		m.Description = &NodeDescription***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Description, o.Description)
	***REMOVED***
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Status, &o.Status)
	if o.ManagerStatus != nil ***REMOVED***
		m.ManagerStatus = &ManagerStatus***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.ManagerStatus, o.ManagerStatus)
	***REMOVED***
	if o.Attachment != nil ***REMOVED***
		m.Attachment = &NetworkAttachment***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Attachment, o.Attachment)
	***REMOVED***
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Certificate, &o.Certificate)
	if o.Attachments != nil ***REMOVED***
		m.Attachments = make([]*NetworkAttachment, len(o.Attachments))
		for i := range m.Attachments ***REMOVED***
			m.Attachments[i] = &NetworkAttachment***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.Attachments[i], o.Attachments[i])
		***REMOVED***
	***REMOVED***

***REMOVED***

func (m *Service) Copy() *Service ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Service***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Service) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Service)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
	if o.SpecVersion != nil ***REMOVED***
		m.SpecVersion = &Version***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.SpecVersion, o.SpecVersion)
	***REMOVED***
	if o.PreviousSpec != nil ***REMOVED***
		m.PreviousSpec = &ServiceSpec***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.PreviousSpec, o.PreviousSpec)
	***REMOVED***
	if o.PreviousSpecVersion != nil ***REMOVED***
		m.PreviousSpecVersion = &Version***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.PreviousSpecVersion, o.PreviousSpecVersion)
	***REMOVED***
	if o.Endpoint != nil ***REMOVED***
		m.Endpoint = &Endpoint***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Endpoint, o.Endpoint)
	***REMOVED***
	if o.UpdateStatus != nil ***REMOVED***
		m.UpdateStatus = &UpdateStatus***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.UpdateStatus, o.UpdateStatus)
	***REMOVED***
***REMOVED***

func (m *Endpoint) Copy() *Endpoint ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Endpoint***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Endpoint) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Endpoint)
	*m = *o
	if o.Spec != nil ***REMOVED***
		m.Spec = &EndpointSpec***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Spec, o.Spec)
	***REMOVED***
	if o.Ports != nil ***REMOVED***
		m.Ports = make([]*PortConfig, len(o.Ports))
		for i := range m.Ports ***REMOVED***
			m.Ports[i] = &PortConfig***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.Ports[i], o.Ports[i])
		***REMOVED***
	***REMOVED***

	if o.VirtualIPs != nil ***REMOVED***
		m.VirtualIPs = make([]*Endpoint_VirtualIP, len(o.VirtualIPs))
		for i := range m.VirtualIPs ***REMOVED***
			m.VirtualIPs[i] = &Endpoint_VirtualIP***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.VirtualIPs[i], o.VirtualIPs[i])
		***REMOVED***
	***REMOVED***

***REMOVED***

func (m *Endpoint_VirtualIP) Copy() *Endpoint_VirtualIP ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Endpoint_VirtualIP***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Endpoint_VirtualIP) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Endpoint_VirtualIP)
	*m = *o
***REMOVED***

func (m *Task) Copy() *Task ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Task***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Task) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Task)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
	if o.SpecVersion != nil ***REMOVED***
		m.SpecVersion = &Version***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.SpecVersion, o.SpecVersion)
	***REMOVED***
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Annotations, &o.Annotations)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.ServiceAnnotations, &o.ServiceAnnotations)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Status, &o.Status)
	if o.Networks != nil ***REMOVED***
		m.Networks = make([]*NetworkAttachment, len(o.Networks))
		for i := range m.Networks ***REMOVED***
			m.Networks[i] = &NetworkAttachment***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.Networks[i], o.Networks[i])
		***REMOVED***
	***REMOVED***

	if o.Endpoint != nil ***REMOVED***
		m.Endpoint = &Endpoint***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Endpoint, o.Endpoint)
	***REMOVED***
	if o.LogDriver != nil ***REMOVED***
		m.LogDriver = &Driver***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.LogDriver, o.LogDriver)
	***REMOVED***
	if o.AssignedGenericResources != nil ***REMOVED***
		m.AssignedGenericResources = make([]*GenericResource, len(o.AssignedGenericResources))
		for i := range m.AssignedGenericResources ***REMOVED***
			m.AssignedGenericResources[i] = &GenericResource***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.AssignedGenericResources[i], o.AssignedGenericResources[i])
		***REMOVED***
	***REMOVED***

***REMOVED***

func (m *NetworkAttachment) Copy() *NetworkAttachment ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &NetworkAttachment***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *NetworkAttachment) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*NetworkAttachment)
	*m = *o
	if o.Network != nil ***REMOVED***
		m.Network = &Network***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Network, o.Network)
	***REMOVED***
	if o.Addresses != nil ***REMOVED***
		m.Addresses = make([]string, len(o.Addresses))
		copy(m.Addresses, o.Addresses)
	***REMOVED***

	if o.Aliases != nil ***REMOVED***
		m.Aliases = make([]string, len(o.Aliases))
		copy(m.Aliases, o.Aliases)
	***REMOVED***

	if o.DriverAttachmentOpts != nil ***REMOVED***
		m.DriverAttachmentOpts = make(map[string]string, len(o.DriverAttachmentOpts))
		for k, v := range o.DriverAttachmentOpts ***REMOVED***
			m.DriverAttachmentOpts[k] = v
		***REMOVED***
	***REMOVED***

***REMOVED***

func (m *Network) Copy() *Network ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Network***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Network) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Network)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
	if o.DriverState != nil ***REMOVED***
		m.DriverState = &Driver***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.DriverState, o.DriverState)
	***REMOVED***
	if o.IPAM != nil ***REMOVED***
		m.IPAM = &IPAMOptions***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.IPAM, o.IPAM)
	***REMOVED***
***REMOVED***

func (m *Cluster) Copy() *Cluster ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Cluster***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Cluster) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Cluster)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.RootCA, &o.RootCA)
	if o.NetworkBootstrapKeys != nil ***REMOVED***
		m.NetworkBootstrapKeys = make([]*EncryptionKey, len(o.NetworkBootstrapKeys))
		for i := range m.NetworkBootstrapKeys ***REMOVED***
			m.NetworkBootstrapKeys[i] = &EncryptionKey***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.NetworkBootstrapKeys[i], o.NetworkBootstrapKeys[i])
		***REMOVED***
	***REMOVED***

	if o.BlacklistedCertificates != nil ***REMOVED***
		m.BlacklistedCertificates = make(map[string]*BlacklistedCertificate, len(o.BlacklistedCertificates))
		for k, v := range o.BlacklistedCertificates ***REMOVED***
			m.BlacklistedCertificates[k] = &BlacklistedCertificate***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.BlacklistedCertificates[k], v)
		***REMOVED***
	***REMOVED***

	if o.UnlockKeys != nil ***REMOVED***
		m.UnlockKeys = make([]*EncryptionKey, len(o.UnlockKeys))
		for i := range m.UnlockKeys ***REMOVED***
			m.UnlockKeys[i] = &EncryptionKey***REMOVED******REMOVED***
			github_com_docker_swarmkit_api_deepcopy.Copy(m.UnlockKeys[i], o.UnlockKeys[i])
		***REMOVED***
	***REMOVED***

***REMOVED***

func (m *Secret) Copy() *Secret ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Secret***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Secret) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Secret)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
***REMOVED***

func (m *Config) Copy() *Config ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Config***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Config) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Config)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Spec, &o.Spec)
***REMOVED***

func (m *Resource) Copy() *Resource ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Resource***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Resource) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Resource)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Annotations, &o.Annotations)
	if o.Payload != nil ***REMOVED***
		m.Payload = &google_protobuf3.Any***REMOVED******REMOVED***
		github_com_docker_swarmkit_api_deepcopy.Copy(m.Payload, o.Payload)
	***REMOVED***
***REMOVED***

func (m *Extension) Copy() *Extension ***REMOVED***
	if m == nil ***REMOVED***
		return nil
	***REMOVED***
	o := &Extension***REMOVED******REMOVED***
	o.CopyFrom(m)
	return o
***REMOVED***

func (m *Extension) CopyFrom(src interface***REMOVED******REMOVED***) ***REMOVED***

	o := src.(*Extension)
	*m = *o
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Meta, &o.Meta)
	github_com_docker_swarmkit_api_deepcopy.Copy(&m.Annotations, &o.Annotations)
***REMOVED***

func (m *Meta) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Meta) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Version.Size()))
	n1, err := m.Version.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n1
	if m.CreatedAt != nil ***REMOVED***
		dAtA[i] = 0x12
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.CreatedAt.Size()))
		n2, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n2
	***REMOVED***
	if m.UpdatedAt != nil ***REMOVED***
		dAtA[i] = 0x1a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.UpdatedAt.Size()))
		n3, err := m.UpdatedAt.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n3
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Node) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Node) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n4, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n5, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n5
	if m.Description != nil ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Description.Size()))
		n6, err := m.Description.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n6
	***REMOVED***
	dAtA[i] = 0x2a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Status.Size()))
	n7, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n7
	if m.ManagerStatus != nil ***REMOVED***
		dAtA[i] = 0x32
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.ManagerStatus.Size()))
		n8, err := m.ManagerStatus.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n8
	***REMOVED***
	if m.Attachment != nil ***REMOVED***
		dAtA[i] = 0x3a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Attachment.Size()))
		n9, err := m.Attachment.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n9
	***REMOVED***
	dAtA[i] = 0x42
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Certificate.Size()))
	n10, err := m.Certificate.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n10
	if m.Role != 0 ***REMOVED***
		dAtA[i] = 0x48
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Role))
	***REMOVED***
	if len(m.Attachments) > 0 ***REMOVED***
		for _, msg := range m.Attachments ***REMOVED***
			dAtA[i] = 0x52
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Service) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Service) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n11, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n11
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n12, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n12
	if m.Endpoint != nil ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Endpoint.Size()))
		n13, err := m.Endpoint.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n13
	***REMOVED***
	if m.UpdateStatus != nil ***REMOVED***
		dAtA[i] = 0x2a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.UpdateStatus.Size()))
		n14, err := m.UpdateStatus.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n14
	***REMOVED***
	if m.PreviousSpec != nil ***REMOVED***
		dAtA[i] = 0x32
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.PreviousSpec.Size()))
		n15, err := m.PreviousSpec.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n15
	***REMOVED***
	if m.SpecVersion != nil ***REMOVED***
		dAtA[i] = 0x52
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.SpecVersion.Size()))
		n16, err := m.SpecVersion.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n16
	***REMOVED***
	if m.PreviousSpecVersion != nil ***REMOVED***
		dAtA[i] = 0x5a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.PreviousSpecVersion.Size()))
		n17, err := m.PreviousSpecVersion.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n17
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Endpoint) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Endpoint) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Spec != nil ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
		n18, err := m.Spec.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n18
	***REMOVED***
	if len(m.Ports) > 0 ***REMOVED***
		for _, msg := range m.Ports ***REMOVED***
			dAtA[i] = 0x12
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	if len(m.VirtualIPs) > 0 ***REMOVED***
		for _, msg := range m.VirtualIPs ***REMOVED***
			dAtA[i] = 0x1a
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Endpoint_VirtualIP) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Endpoint_VirtualIP) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NetworkID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.NetworkID)))
		i += copy(dAtA[i:], m.NetworkID)
	***REMOVED***
	if len(m.Addr) > 0 ***REMOVED***
		dAtA[i] = 0x12
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Task) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Task) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n19, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n20, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n20
	if len(m.ServiceID) > 0 ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ServiceID)))
		i += copy(dAtA[i:], m.ServiceID)
	***REMOVED***
	if m.Slot != 0 ***REMOVED***
		dAtA[i] = 0x28
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Slot))
	***REMOVED***
	if len(m.NodeID) > 0 ***REMOVED***
		dAtA[i] = 0x32
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	***REMOVED***
	dAtA[i] = 0x3a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Annotations.Size()))
	n21, err := m.Annotations.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n21
	dAtA[i] = 0x42
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.ServiceAnnotations.Size()))
	n22, err := m.ServiceAnnotations.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n22
	dAtA[i] = 0x4a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Status.Size()))
	n23, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n23
	if m.DesiredState != 0 ***REMOVED***
		dAtA[i] = 0x50
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.DesiredState))
	***REMOVED***
	if len(m.Networks) > 0 ***REMOVED***
		for _, msg := range m.Networks ***REMOVED***
			dAtA[i] = 0x5a
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	if m.Endpoint != nil ***REMOVED***
		dAtA[i] = 0x62
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Endpoint.Size()))
		n24, err := m.Endpoint.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n24
	***REMOVED***
	if m.LogDriver != nil ***REMOVED***
		dAtA[i] = 0x6a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.LogDriver.Size()))
		n25, err := m.LogDriver.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n25
	***REMOVED***
	if m.SpecVersion != nil ***REMOVED***
		dAtA[i] = 0x72
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.SpecVersion.Size()))
		n26, err := m.SpecVersion.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n26
	***REMOVED***
	if len(m.AssignedGenericResources) > 0 ***REMOVED***
		for _, msg := range m.AssignedGenericResources ***REMOVED***
			dAtA[i] = 0x7a
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *NetworkAttachment) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *NetworkAttachment) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if m.Network != nil ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Network.Size()))
		n27, err := m.Network.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n27
	***REMOVED***
	if len(m.Addresses) > 0 ***REMOVED***
		for _, s := range m.Addresses ***REMOVED***
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 ***REMOVED***
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			***REMOVED***
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		***REMOVED***
	***REMOVED***
	if len(m.Aliases) > 0 ***REMOVED***
		for _, s := range m.Aliases ***REMOVED***
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 ***REMOVED***
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			***REMOVED***
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		***REMOVED***
	***REMOVED***
	if len(m.DriverAttachmentOpts) > 0 ***REMOVED***
		for k, _ := range m.DriverAttachmentOpts ***REMOVED***
			dAtA[i] = 0x22
			i++
			v := m.DriverAttachmentOpts[k]
			mapSize := 1 + len(k) + sovObjects(uint64(len(k))) + 1 + len(v) + sovObjects(uint64(len(v)))
			i = encodeVarintObjects(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintObjects(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintObjects(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Network) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Network) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n28, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n28
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n29, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n29
	if m.DriverState != nil ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.DriverState.Size()))
		n30, err := m.DriverState.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n30
	***REMOVED***
	if m.IPAM != nil ***REMOVED***
		dAtA[i] = 0x2a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.IPAM.Size()))
		n31, err := m.IPAM.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n31
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Cluster) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n32, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n32
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n33, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n33
	dAtA[i] = 0x22
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.RootCA.Size()))
	n34, err := m.RootCA.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n34
	if len(m.NetworkBootstrapKeys) > 0 ***REMOVED***
		for _, msg := range m.NetworkBootstrapKeys ***REMOVED***
			dAtA[i] = 0x2a
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	if m.EncryptionKeyLamportClock != 0 ***REMOVED***
		dAtA[i] = 0x30
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.EncryptionKeyLamportClock))
	***REMOVED***
	if len(m.BlacklistedCertificates) > 0 ***REMOVED***
		for k, _ := range m.BlacklistedCertificates ***REMOVED***
			dAtA[i] = 0x42
			i++
			v := m.BlacklistedCertificates[k]
			msgSize := 0
			if v != nil ***REMOVED***
				msgSize = v.Size()
				msgSize += 1 + sovObjects(uint64(msgSize))
			***REMOVED***
			mapSize := 1 + len(k) + sovObjects(uint64(len(k))) + msgSize
			i = encodeVarintObjects(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintObjects(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil ***REMOVED***
				dAtA[i] = 0x12
				i++
				i = encodeVarintObjects(dAtA, i, uint64(v.Size()))
				n35, err := v.MarshalTo(dAtA[i:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				i += n35
			***REMOVED***
		***REMOVED***
	***REMOVED***
	if len(m.UnlockKeys) > 0 ***REMOVED***
		for _, msg := range m.UnlockKeys ***REMOVED***
			dAtA[i] = 0x4a
			i++
			i = encodeVarintObjects(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil ***REMOVED***
				return 0, err
			***REMOVED***
			i += n
		***REMOVED***
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Secret) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Secret) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n36, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n36
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n37, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n37
	if m.Internal ***REMOVED***
		dAtA[i] = 0x20
		i++
		if m.Internal ***REMOVED***
			dAtA[i] = 1
		***REMOVED*** else ***REMOVED***
			dAtA[i] = 0
		***REMOVED***
		i++
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Config) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Config) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n38, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n38
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Spec.Size()))
	n39, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n39
	return i, nil
***REMOVED***

func (m *Resource) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Resource) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n40, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n40
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Annotations.Size()))
	n41, err := m.Annotations.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n41
	if len(m.Kind) > 0 ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.Kind)))
		i += copy(dAtA[i:], m.Kind)
	***REMOVED***
	if m.Payload != nil ***REMOVED***
		dAtA[i] = 0x2a
		i++
		i = encodeVarintObjects(dAtA, i, uint64(m.Payload.Size()))
		n42, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil ***REMOVED***
			return 0, err
		***REMOVED***
		i += n42
	***REMOVED***
	return i, nil
***REMOVED***

func (m *Extension) Marshal() (dAtA []byte, err error) ***REMOVED***
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil ***REMOVED***
		return nil, err
	***REMOVED***
	return dAtA[:n], nil
***REMOVED***

func (m *Extension) MarshalTo(dAtA []byte) (int, error) ***REMOVED***
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 ***REMOVED***
		dAtA[i] = 0xa
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	***REMOVED***
	dAtA[i] = 0x12
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Meta.Size()))
	n43, err := m.Meta.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n43
	dAtA[i] = 0x1a
	i++
	i = encodeVarintObjects(dAtA, i, uint64(m.Annotations.Size()))
	n44, err := m.Annotations.MarshalTo(dAtA[i:])
	if err != nil ***REMOVED***
		return 0, err
	***REMOVED***
	i += n44
	if len(m.Description) > 0 ***REMOVED***
		dAtA[i] = 0x22
		i++
		i = encodeVarintObjects(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	***REMOVED***
	return i, nil
***REMOVED***

func encodeFixed64Objects(dAtA []byte, offset int, v uint64) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
***REMOVED***
func encodeFixed32Objects(dAtA []byte, offset int, v uint32) int ***REMOVED***
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
***REMOVED***
func encodeVarintObjects(dAtA []byte, offset int, v uint64) int ***REMOVED***
	for v >= 1<<7 ***REMOVED***
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	***REMOVED***
	dAtA[offset] = uint8(v)
	return offset + 1
***REMOVED***

func (m *Meta) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = m.Version.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.CreatedAt != nil ***REMOVED***
		l = m.CreatedAt.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.UpdatedAt != nil ***REMOVED***
		l = m.UpdatedAt.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *Node) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.Description != nil ***REMOVED***
		l = m.Description.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Status.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.ManagerStatus != nil ***REMOVED***
		l = m.ManagerStatus.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.Attachment != nil ***REMOVED***
		l = m.Attachment.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Certificate.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.Role != 0 ***REMOVED***
		n += 1 + sovObjects(uint64(m.Role))
	***REMOVED***
	if len(m.Attachments) > 0 ***REMOVED***
		for _, e := range m.Attachments ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *Service) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.Endpoint != nil ***REMOVED***
		l = m.Endpoint.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.UpdateStatus != nil ***REMOVED***
		l = m.UpdateStatus.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.PreviousSpec != nil ***REMOVED***
		l = m.PreviousSpec.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.SpecVersion != nil ***REMOVED***
		l = m.SpecVersion.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.PreviousSpecVersion != nil ***REMOVED***
		l = m.PreviousSpecVersion.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *Endpoint) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Spec != nil ***REMOVED***
		l = m.Spec.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if len(m.Ports) > 0 ***REMOVED***
		for _, e := range m.Ports ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	if len(m.VirtualIPs) > 0 ***REMOVED***
		for _, e := range m.VirtualIPs ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *Endpoint_VirtualIP) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.NetworkID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = len(m.Addr)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *Task) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = len(m.ServiceID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.Slot != 0 ***REMOVED***
		n += 1 + sovObjects(uint64(m.Slot))
	***REMOVED***
	l = len(m.NodeID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Annotations.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.ServiceAnnotations.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.DesiredState != 0 ***REMOVED***
		n += 1 + sovObjects(uint64(m.DesiredState))
	***REMOVED***
	if len(m.Networks) > 0 ***REMOVED***
		for _, e := range m.Networks ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	if m.Endpoint != nil ***REMOVED***
		l = m.Endpoint.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.LogDriver != nil ***REMOVED***
		l = m.LogDriver.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.SpecVersion != nil ***REMOVED***
		l = m.SpecVersion.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if len(m.AssignedGenericResources) > 0 ***REMOVED***
		for _, e := range m.AssignedGenericResources ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *NetworkAttachment) Size() (n int) ***REMOVED***
	var l int
	_ = l
	if m.Network != nil ***REMOVED***
		l = m.Network.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if len(m.Addresses) > 0 ***REMOVED***
		for _, s := range m.Addresses ***REMOVED***
			l = len(s)
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	if len(m.Aliases) > 0 ***REMOVED***
		for _, s := range m.Aliases ***REMOVED***
			l = len(s)
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	if len(m.DriverAttachmentOpts) > 0 ***REMOVED***
		for k, v := range m.DriverAttachmentOpts ***REMOVED***
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovObjects(uint64(len(k))) + 1 + len(v) + sovObjects(uint64(len(v)))
			n += mapEntrySize + 1 + sovObjects(uint64(mapEntrySize))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *Network) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.DriverState != nil ***REMOVED***
		l = m.DriverState.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.IPAM != nil ***REMOVED***
		l = m.IPAM.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *Cluster) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.RootCA.Size()
	n += 1 + l + sovObjects(uint64(l))
	if len(m.NetworkBootstrapKeys) > 0 ***REMOVED***
		for _, e := range m.NetworkBootstrapKeys ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	if m.EncryptionKeyLamportClock != 0 ***REMOVED***
		n += 1 + sovObjects(uint64(m.EncryptionKeyLamportClock))
	***REMOVED***
	if len(m.BlacklistedCertificates) > 0 ***REMOVED***
		for k, v := range m.BlacklistedCertificates ***REMOVED***
			_ = k
			_ = v
			l = 0
			if v != nil ***REMOVED***
				l = v.Size()
				l += 1 + sovObjects(uint64(l))
			***REMOVED***
			mapEntrySize := 1 + len(k) + sovObjects(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovObjects(uint64(mapEntrySize))
		***REMOVED***
	***REMOVED***
	if len(m.UnlockKeys) > 0 ***REMOVED***
		for _, e := range m.UnlockKeys ***REMOVED***
			l = e.Size()
			n += 1 + l + sovObjects(uint64(l))
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***

func (m *Secret) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	if m.Internal ***REMOVED***
		n += 2
	***REMOVED***
	return n
***REMOVED***

func (m *Config) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovObjects(uint64(l))
	return n
***REMOVED***

func (m *Resource) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Annotations.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = len(m.Kind)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	if m.Payload != nil ***REMOVED***
		l = m.Payload.Size()
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func (m *Extension) Size() (n int) ***REMOVED***
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	l = m.Meta.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = m.Annotations.Size()
	n += 1 + l + sovObjects(uint64(l))
	l = len(m.Description)
	if l > 0 ***REMOVED***
		n += 1 + l + sovObjects(uint64(l))
	***REMOVED***
	return n
***REMOVED***

func sovObjects(x uint64) (n int) ***REMOVED***
	for ***REMOVED***
		n++
		x >>= 7
		if x == 0 ***REMOVED***
			break
		***REMOVED***
	***REMOVED***
	return n
***REMOVED***
func sozObjects(x uint64) (n int) ***REMOVED***
	return sovObjects(uint64((x << 1) ^ uint64((int64(x) >> 63))))
***REMOVED***

type NodeCheckFunc func(t1, t2 *Node) bool

type EventCreateNode struct ***REMOVED***
	Node   *Node
	Checks []NodeCheckFunc
***REMOVED***

func (e EventCreateNode) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateNode)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Node, typedEvent.Node) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateNode struct ***REMOVED***
	Node    *Node
	OldNode *Node
	Checks  []NodeCheckFunc
***REMOVED***

func (e EventUpdateNode) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateNode)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Node, typedEvent.Node) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteNode struct ***REMOVED***
	Node   *Node
	Checks []NodeCheckFunc
***REMOVED***

func (e EventDeleteNode) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteNode)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Node, typedEvent.Node) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Node) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Node) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Node) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Node) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Node) EventCreate() Event ***REMOVED***
	return EventCreateNode***REMOVED***Node: m***REMOVED***
***REMOVED***

func (m *Node) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateNode***REMOVED***Node: m, OldNode: oldObject.(*Node)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateNode***REMOVED***Node: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Node) EventDelete() Event ***REMOVED***
	return EventDeleteNode***REMOVED***Node: m***REMOVED***
***REMOVED***

func NodeCheckID(v1, v2 *Node) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func NodeCheckIDPrefix(v1, v2 *Node) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func NodeCheckName(v1, v2 *Node) bool ***REMOVED***
	if v1.Description == nil || v2.Description == nil ***REMOVED***
		return false
	***REMOVED***
	return v1.Description.Hostname == v2.Description.Hostname
***REMOVED***

func NodeCheckNamePrefix(v1, v2 *Node) bool ***REMOVED***
	if v1.Description == nil || v2.Description == nil ***REMOVED***
		return false
	***REMOVED***
	return strings.HasPrefix(v2.Description.Hostname, v1.Description.Hostname)
***REMOVED***

func NodeCheckCustom(v1, v2 *Node) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func NodeCheckCustomPrefix(v1, v2 *Node) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func NodeCheckRole(v1, v2 *Node) bool ***REMOVED***
	return v1.Role == v2.Role
***REMOVED***

func NodeCheckMembership(v1, v2 *Node) bool ***REMOVED***
	return v1.Spec.Membership == v2.Spec.Membership
***REMOVED***

func ConvertNodeWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m             Node
		checkFuncs    []NodeCheckFunc
		hasRole       bool
		hasMembership bool
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, NodeCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, NodeCheckIDPrefix)
		case *SelectBy_Name:
			if m.Description != nil ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Description = &NodeDescription***REMOVED***Hostname: v.Name***REMOVED***
			checkFuncs = append(checkFuncs, NodeCheckName)
		case *SelectBy_NamePrefix:
			if m.Description != nil ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Description = &NodeDescription***REMOVED***Hostname: v.NamePrefix***REMOVED***
			checkFuncs = append(checkFuncs, NodeCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, NodeCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, NodeCheckCustomPrefix)
		case *SelectBy_Role:
			if hasRole ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			hasRole = true
			m.Role = v.Role
			checkFuncs = append(checkFuncs, NodeCheckRole)
		case *SelectBy_Membership:
			if hasMembership ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			hasMembership = true
			m.Spec.Membership = v.Membership
			checkFuncs = append(checkFuncs, NodeCheckMembership)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateNode***REMOVED***Node: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateNode***REMOVED***Node: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteNode***REMOVED***Node: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type NodeIndexerByID struct***REMOVED******REMOVED***

func (indexer NodeIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NodeIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NodeIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Node)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type NodeIndexerByName struct***REMOVED******REMOVED***

func (indexer NodeIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NodeIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NodeIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Node)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type NodeCustomIndexer struct***REMOVED******REMOVED***

func (indexer NodeCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NodeCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NodeCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Node)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type ServiceCheckFunc func(t1, t2 *Service) bool

type EventCreateService struct ***REMOVED***
	Service *Service
	Checks  []ServiceCheckFunc
***REMOVED***

func (e EventCreateService) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateService)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Service, typedEvent.Service) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateService struct ***REMOVED***
	Service    *Service
	OldService *Service
	Checks     []ServiceCheckFunc
***REMOVED***

func (e EventUpdateService) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateService)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Service, typedEvent.Service) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteService struct ***REMOVED***
	Service *Service
	Checks  []ServiceCheckFunc
***REMOVED***

func (e EventDeleteService) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteService)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Service, typedEvent.Service) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Service) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Service) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Service) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Service) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Service) EventCreate() Event ***REMOVED***
	return EventCreateService***REMOVED***Service: m***REMOVED***
***REMOVED***

func (m *Service) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateService***REMOVED***Service: m, OldService: oldObject.(*Service)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateService***REMOVED***Service: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Service) EventDelete() Event ***REMOVED***
	return EventDeleteService***REMOVED***Service: m***REMOVED***
***REMOVED***

func ServiceCheckID(v1, v2 *Service) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func ServiceCheckIDPrefix(v1, v2 *Service) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func ServiceCheckName(v1, v2 *Service) bool ***REMOVED***
	return v1.Spec.Annotations.Name == v2.Spec.Annotations.Name
***REMOVED***

func ServiceCheckNamePrefix(v1, v2 *Service) bool ***REMOVED***
	return strings.HasPrefix(v2.Spec.Annotations.Name, v1.Spec.Annotations.Name)
***REMOVED***

func ServiceCheckCustom(v1, v2 *Service) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ServiceCheckCustomPrefix(v1, v2 *Service) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConvertServiceWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Service
		checkFuncs []ServiceCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, ServiceCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, ServiceCheckIDPrefix)
		case *SelectBy_Name:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, ServiceCheckName)
		case *SelectBy_NamePrefix:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, ServiceCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ServiceCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ServiceCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateService***REMOVED***Service: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateService***REMOVED***Service: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteService***REMOVED***Service: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type ServiceIndexerByID struct***REMOVED******REMOVED***

func (indexer ServiceIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ServiceIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ServiceIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Service)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type ServiceIndexerByName struct***REMOVED******REMOVED***

func (indexer ServiceIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ServiceIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ServiceIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Service)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type ServiceCustomIndexer struct***REMOVED******REMOVED***

func (indexer ServiceCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ServiceCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ServiceCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Service)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type TaskCheckFunc func(t1, t2 *Task) bool

type EventCreateTask struct ***REMOVED***
	Task   *Task
	Checks []TaskCheckFunc
***REMOVED***

func (e EventCreateTask) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateTask)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Task, typedEvent.Task) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateTask struct ***REMOVED***
	Task    *Task
	OldTask *Task
	Checks  []TaskCheckFunc
***REMOVED***

func (e EventUpdateTask) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateTask)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Task, typedEvent.Task) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteTask struct ***REMOVED***
	Task   *Task
	Checks []TaskCheckFunc
***REMOVED***

func (e EventDeleteTask) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteTask)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Task, typedEvent.Task) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Task) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Task) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Task) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Task) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Task) EventCreate() Event ***REMOVED***
	return EventCreateTask***REMOVED***Task: m***REMOVED***
***REMOVED***

func (m *Task) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateTask***REMOVED***Task: m, OldTask: oldObject.(*Task)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateTask***REMOVED***Task: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Task) EventDelete() Event ***REMOVED***
	return EventDeleteTask***REMOVED***Task: m***REMOVED***
***REMOVED***

func TaskCheckID(v1, v2 *Task) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func TaskCheckIDPrefix(v1, v2 *Task) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func TaskCheckName(v1, v2 *Task) bool ***REMOVED***
	return v1.Annotations.Name == v2.Annotations.Name
***REMOVED***

func TaskCheckNamePrefix(v1, v2 *Task) bool ***REMOVED***
	return strings.HasPrefix(v2.Annotations.Name, v1.Annotations.Name)
***REMOVED***

func TaskCheckCustom(v1, v2 *Task) bool ***REMOVED***
	return checkCustom(v1.Annotations, v2.Annotations)
***REMOVED***

func TaskCheckCustomPrefix(v1, v2 *Task) bool ***REMOVED***
	return checkCustomPrefix(v1.Annotations, v2.Annotations)
***REMOVED***

func TaskCheckNodeID(v1, v2 *Task) bool ***REMOVED***
	return v1.NodeID == v2.NodeID
***REMOVED***

func TaskCheckServiceID(v1, v2 *Task) bool ***REMOVED***
	return v1.ServiceID == v2.ServiceID
***REMOVED***

func TaskCheckSlot(v1, v2 *Task) bool ***REMOVED***
	return v1.Slot == v2.Slot
***REMOVED***

func TaskCheckDesiredState(v1, v2 *Task) bool ***REMOVED***
	return v1.DesiredState == v2.DesiredState
***REMOVED***

func ConvertTaskWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m               Task
		checkFuncs      []TaskCheckFunc
		hasDesiredState bool
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, TaskCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, TaskCheckIDPrefix)
		case *SelectBy_Name:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, TaskCheckName)
		case *SelectBy_NamePrefix:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, TaskCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, TaskCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, TaskCheckCustomPrefix)
		case *SelectBy_ServiceID:
			if m.ServiceID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ServiceID = v.ServiceID
			checkFuncs = append(checkFuncs, TaskCheckServiceID)
		case *SelectBy_NodeID:
			if m.NodeID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.NodeID = v.NodeID
			checkFuncs = append(checkFuncs, TaskCheckNodeID)
		case *SelectBy_Slot:
			if m.Slot != 0 || m.ServiceID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ServiceID = v.Slot.ServiceID
			m.Slot = v.Slot.Slot
			checkFuncs = append(checkFuncs, TaskCheckNodeID, TaskCheckSlot)
		case *SelectBy_DesiredState:
			if hasDesiredState ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			hasDesiredState = true
			m.DesiredState = v.DesiredState
			checkFuncs = append(checkFuncs, TaskCheckDesiredState)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateTask***REMOVED***Task: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateTask***REMOVED***Task: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteTask***REMOVED***Task: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type TaskIndexerByID struct***REMOVED******REMOVED***

func (indexer TaskIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer TaskIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer TaskIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Task)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type TaskIndexerByName struct***REMOVED******REMOVED***

func (indexer TaskIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer TaskIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer TaskIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Task)
	val := m.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type TaskCustomIndexer struct***REMOVED******REMOVED***

func (indexer TaskCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer TaskCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer TaskCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Task)
	return customIndexer("", &m.Annotations)
***REMOVED***

type NetworkCheckFunc func(t1, t2 *Network) bool

type EventCreateNetwork struct ***REMOVED***
	Network *Network
	Checks  []NetworkCheckFunc
***REMOVED***

func (e EventCreateNetwork) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateNetwork)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Network, typedEvent.Network) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateNetwork struct ***REMOVED***
	Network    *Network
	OldNetwork *Network
	Checks     []NetworkCheckFunc
***REMOVED***

func (e EventUpdateNetwork) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateNetwork)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Network, typedEvent.Network) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteNetwork struct ***REMOVED***
	Network *Network
	Checks  []NetworkCheckFunc
***REMOVED***

func (e EventDeleteNetwork) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteNetwork)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Network, typedEvent.Network) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Network) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Network) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Network) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Network) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Network) EventCreate() Event ***REMOVED***
	return EventCreateNetwork***REMOVED***Network: m***REMOVED***
***REMOVED***

func (m *Network) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateNetwork***REMOVED***Network: m, OldNetwork: oldObject.(*Network)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateNetwork***REMOVED***Network: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Network) EventDelete() Event ***REMOVED***
	return EventDeleteNetwork***REMOVED***Network: m***REMOVED***
***REMOVED***

func NetworkCheckID(v1, v2 *Network) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func NetworkCheckIDPrefix(v1, v2 *Network) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func NetworkCheckName(v1, v2 *Network) bool ***REMOVED***
	return v1.Spec.Annotations.Name == v2.Spec.Annotations.Name
***REMOVED***

func NetworkCheckNamePrefix(v1, v2 *Network) bool ***REMOVED***
	return strings.HasPrefix(v2.Spec.Annotations.Name, v1.Spec.Annotations.Name)
***REMOVED***

func NetworkCheckCustom(v1, v2 *Network) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func NetworkCheckCustomPrefix(v1, v2 *Network) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConvertNetworkWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Network
		checkFuncs []NetworkCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, NetworkCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, NetworkCheckIDPrefix)
		case *SelectBy_Name:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, NetworkCheckName)
		case *SelectBy_NamePrefix:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, NetworkCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, NetworkCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, NetworkCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateNetwork***REMOVED***Network: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateNetwork***REMOVED***Network: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteNetwork***REMOVED***Network: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type NetworkIndexerByID struct***REMOVED******REMOVED***

func (indexer NetworkIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NetworkIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NetworkIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Network)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type NetworkIndexerByName struct***REMOVED******REMOVED***

func (indexer NetworkIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NetworkIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NetworkIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Network)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type NetworkCustomIndexer struct***REMOVED******REMOVED***

func (indexer NetworkCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer NetworkCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer NetworkCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Network)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type ClusterCheckFunc func(t1, t2 *Cluster) bool

type EventCreateCluster struct ***REMOVED***
	Cluster *Cluster
	Checks  []ClusterCheckFunc
***REMOVED***

func (e EventCreateCluster) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateCluster)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Cluster, typedEvent.Cluster) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateCluster struct ***REMOVED***
	Cluster    *Cluster
	OldCluster *Cluster
	Checks     []ClusterCheckFunc
***REMOVED***

func (e EventUpdateCluster) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateCluster)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Cluster, typedEvent.Cluster) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteCluster struct ***REMOVED***
	Cluster *Cluster
	Checks  []ClusterCheckFunc
***REMOVED***

func (e EventDeleteCluster) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteCluster)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Cluster, typedEvent.Cluster) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Cluster) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Cluster) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Cluster) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Cluster) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Cluster) EventCreate() Event ***REMOVED***
	return EventCreateCluster***REMOVED***Cluster: m***REMOVED***
***REMOVED***

func (m *Cluster) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateCluster***REMOVED***Cluster: m, OldCluster: oldObject.(*Cluster)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateCluster***REMOVED***Cluster: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Cluster) EventDelete() Event ***REMOVED***
	return EventDeleteCluster***REMOVED***Cluster: m***REMOVED***
***REMOVED***

func ClusterCheckID(v1, v2 *Cluster) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func ClusterCheckIDPrefix(v1, v2 *Cluster) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func ClusterCheckName(v1, v2 *Cluster) bool ***REMOVED***
	return v1.Spec.Annotations.Name == v2.Spec.Annotations.Name
***REMOVED***

func ClusterCheckNamePrefix(v1, v2 *Cluster) bool ***REMOVED***
	return strings.HasPrefix(v2.Spec.Annotations.Name, v1.Spec.Annotations.Name)
***REMOVED***

func ClusterCheckCustom(v1, v2 *Cluster) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ClusterCheckCustomPrefix(v1, v2 *Cluster) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConvertClusterWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Cluster
		checkFuncs []ClusterCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, ClusterCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, ClusterCheckIDPrefix)
		case *SelectBy_Name:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, ClusterCheckName)
		case *SelectBy_NamePrefix:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, ClusterCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ClusterCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ClusterCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateCluster***REMOVED***Cluster: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateCluster***REMOVED***Cluster: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteCluster***REMOVED***Cluster: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type ClusterIndexerByID struct***REMOVED******REMOVED***

func (indexer ClusterIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ClusterIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ClusterIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Cluster)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type ClusterIndexerByName struct***REMOVED******REMOVED***

func (indexer ClusterIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ClusterIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ClusterIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Cluster)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type ClusterCustomIndexer struct***REMOVED******REMOVED***

func (indexer ClusterCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ClusterCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ClusterCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Cluster)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type SecretCheckFunc func(t1, t2 *Secret) bool

type EventCreateSecret struct ***REMOVED***
	Secret *Secret
	Checks []SecretCheckFunc
***REMOVED***

func (e EventCreateSecret) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateSecret)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Secret, typedEvent.Secret) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateSecret struct ***REMOVED***
	Secret    *Secret
	OldSecret *Secret
	Checks    []SecretCheckFunc
***REMOVED***

func (e EventUpdateSecret) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateSecret)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Secret, typedEvent.Secret) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteSecret struct ***REMOVED***
	Secret *Secret
	Checks []SecretCheckFunc
***REMOVED***

func (e EventDeleteSecret) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteSecret)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Secret, typedEvent.Secret) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Secret) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Secret) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Secret) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Secret) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Secret) EventCreate() Event ***REMOVED***
	return EventCreateSecret***REMOVED***Secret: m***REMOVED***
***REMOVED***

func (m *Secret) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateSecret***REMOVED***Secret: m, OldSecret: oldObject.(*Secret)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateSecret***REMOVED***Secret: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Secret) EventDelete() Event ***REMOVED***
	return EventDeleteSecret***REMOVED***Secret: m***REMOVED***
***REMOVED***

func SecretCheckID(v1, v2 *Secret) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func SecretCheckIDPrefix(v1, v2 *Secret) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func SecretCheckName(v1, v2 *Secret) bool ***REMOVED***
	return v1.Spec.Annotations.Name == v2.Spec.Annotations.Name
***REMOVED***

func SecretCheckNamePrefix(v1, v2 *Secret) bool ***REMOVED***
	return strings.HasPrefix(v2.Spec.Annotations.Name, v1.Spec.Annotations.Name)
***REMOVED***

func SecretCheckCustom(v1, v2 *Secret) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func SecretCheckCustomPrefix(v1, v2 *Secret) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConvertSecretWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Secret
		checkFuncs []SecretCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, SecretCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, SecretCheckIDPrefix)
		case *SelectBy_Name:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, SecretCheckName)
		case *SelectBy_NamePrefix:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, SecretCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, SecretCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, SecretCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateSecret***REMOVED***Secret: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateSecret***REMOVED***Secret: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteSecret***REMOVED***Secret: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type SecretIndexerByID struct***REMOVED******REMOVED***

func (indexer SecretIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer SecretIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer SecretIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Secret)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type SecretIndexerByName struct***REMOVED******REMOVED***

func (indexer SecretIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer SecretIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer SecretIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Secret)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type SecretCustomIndexer struct***REMOVED******REMOVED***

func (indexer SecretCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer SecretCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer SecretCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Secret)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type ConfigCheckFunc func(t1, t2 *Config) bool

type EventCreateConfig struct ***REMOVED***
	Config *Config
	Checks []ConfigCheckFunc
***REMOVED***

func (e EventCreateConfig) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateConfig)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Config, typedEvent.Config) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateConfig struct ***REMOVED***
	Config    *Config
	OldConfig *Config
	Checks    []ConfigCheckFunc
***REMOVED***

func (e EventUpdateConfig) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateConfig)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Config, typedEvent.Config) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteConfig struct ***REMOVED***
	Config *Config
	Checks []ConfigCheckFunc
***REMOVED***

func (e EventDeleteConfig) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteConfig)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Config, typedEvent.Config) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Config) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Config) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Config) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Config) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Config) EventCreate() Event ***REMOVED***
	return EventCreateConfig***REMOVED***Config: m***REMOVED***
***REMOVED***

func (m *Config) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateConfig***REMOVED***Config: m, OldConfig: oldObject.(*Config)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateConfig***REMOVED***Config: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Config) EventDelete() Event ***REMOVED***
	return EventDeleteConfig***REMOVED***Config: m***REMOVED***
***REMOVED***

func ConfigCheckID(v1, v2 *Config) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func ConfigCheckIDPrefix(v1, v2 *Config) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func ConfigCheckName(v1, v2 *Config) bool ***REMOVED***
	return v1.Spec.Annotations.Name == v2.Spec.Annotations.Name
***REMOVED***

func ConfigCheckNamePrefix(v1, v2 *Config) bool ***REMOVED***
	return strings.HasPrefix(v2.Spec.Annotations.Name, v1.Spec.Annotations.Name)
***REMOVED***

func ConfigCheckCustom(v1, v2 *Config) bool ***REMOVED***
	return checkCustom(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConfigCheckCustomPrefix(v1, v2 *Config) bool ***REMOVED***
	return checkCustomPrefix(v1.Spec.Annotations, v2.Spec.Annotations)
***REMOVED***

func ConvertConfigWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Config
		checkFuncs []ConfigCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, ConfigCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, ConfigCheckIDPrefix)
		case *SelectBy_Name:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, ConfigCheckName)
		case *SelectBy_NamePrefix:
			if m.Spec.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, ConfigCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ConfigCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Spec.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Spec.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ConfigCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateConfig***REMOVED***Config: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateConfig***REMOVED***Config: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteConfig***REMOVED***Config: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type ConfigIndexerByID struct***REMOVED******REMOVED***

func (indexer ConfigIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ConfigIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ConfigIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Config)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type ConfigIndexerByName struct***REMOVED******REMOVED***

func (indexer ConfigIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ConfigIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ConfigIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Config)
	val := m.Spec.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type ConfigCustomIndexer struct***REMOVED******REMOVED***

func (indexer ConfigCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ConfigCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ConfigCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Config)
	return customIndexer("", &m.Spec.Annotations)
***REMOVED***

type ResourceCheckFunc func(t1, t2 *Resource) bool

type EventCreateResource struct ***REMOVED***
	Resource *Resource
	Checks   []ResourceCheckFunc
***REMOVED***

func (e EventCreateResource) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateResource)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Resource, typedEvent.Resource) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateResource struct ***REMOVED***
	Resource    *Resource
	OldResource *Resource
	Checks      []ResourceCheckFunc
***REMOVED***

func (e EventUpdateResource) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateResource)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Resource, typedEvent.Resource) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteResource struct ***REMOVED***
	Resource *Resource
	Checks   []ResourceCheckFunc
***REMOVED***

func (e EventDeleteResource) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteResource)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Resource, typedEvent.Resource) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Resource) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Resource) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Resource) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Resource) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Resource) EventCreate() Event ***REMOVED***
	return EventCreateResource***REMOVED***Resource: m***REMOVED***
***REMOVED***

func (m *Resource) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateResource***REMOVED***Resource: m, OldResource: oldObject.(*Resource)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateResource***REMOVED***Resource: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Resource) EventDelete() Event ***REMOVED***
	return EventDeleteResource***REMOVED***Resource: m***REMOVED***
***REMOVED***

func ResourceCheckID(v1, v2 *Resource) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func ResourceCheckIDPrefix(v1, v2 *Resource) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func ResourceCheckName(v1, v2 *Resource) bool ***REMOVED***
	return v1.Annotations.Name == v2.Annotations.Name
***REMOVED***

func ResourceCheckNamePrefix(v1, v2 *Resource) bool ***REMOVED***
	return strings.HasPrefix(v2.Annotations.Name, v1.Annotations.Name)
***REMOVED***

func ResourceCheckCustom(v1, v2 *Resource) bool ***REMOVED***
	return checkCustom(v1.Annotations, v2.Annotations)
***REMOVED***

func ResourceCheckCustomPrefix(v1, v2 *Resource) bool ***REMOVED***
	return checkCustomPrefix(v1.Annotations, v2.Annotations)
***REMOVED***

func ResourceCheckKind(v1, v2 *Resource) bool ***REMOVED***
	return v1.Kind == v2.Kind
***REMOVED***

func ConvertResourceWatch(action WatchActionKind, filters []*SelectBy, kind string) ([]Event, error) ***REMOVED***
	var (
		m          Resource
		checkFuncs []ResourceCheckFunc
	)
	m.Kind = kind
	checkFuncs = append(checkFuncs, ResourceCheckKind)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, ResourceCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, ResourceCheckIDPrefix)
		case *SelectBy_Name:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, ResourceCheckName)
		case *SelectBy_NamePrefix:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, ResourceCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ResourceCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ResourceCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateResource***REMOVED***Resource: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateResource***REMOVED***Resource: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteResource***REMOVED***Resource: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type ResourceIndexerByID struct***REMOVED******REMOVED***

func (indexer ResourceIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ResourceIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ResourceIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Resource)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type ResourceIndexerByName struct***REMOVED******REMOVED***

func (indexer ResourceIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ResourceIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ResourceIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Resource)
	val := m.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type ResourceCustomIndexer struct***REMOVED******REMOVED***

func (indexer ResourceCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ResourceCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ResourceCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Resource)
	return customIndexer("", &m.Annotations)
***REMOVED***

type ExtensionCheckFunc func(t1, t2 *Extension) bool

type EventCreateExtension struct ***REMOVED***
	Extension *Extension
	Checks    []ExtensionCheckFunc
***REMOVED***

func (e EventCreateExtension) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventCreateExtension)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Extension, typedEvent.Extension) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventUpdateExtension struct ***REMOVED***
	Extension    *Extension
	OldExtension *Extension
	Checks       []ExtensionCheckFunc
***REMOVED***

func (e EventUpdateExtension) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventUpdateExtension)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Extension, typedEvent.Extension) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***

type EventDeleteExtension struct ***REMOVED***
	Extension *Extension
	Checks    []ExtensionCheckFunc
***REMOVED***

func (e EventDeleteExtension) Matches(apiEvent github_com_docker_go_events.Event) bool ***REMOVED***
	typedEvent, ok := apiEvent.(EventDeleteExtension)
	if !ok ***REMOVED***
		return false
	***REMOVED***

	for _, check := range e.Checks ***REMOVED***
		if !check(e.Extension, typedEvent.Extension) ***REMOVED***
			return false
		***REMOVED***
	***REMOVED***
	return true
***REMOVED***
func (m *Extension) CopyStoreObject() StoreObject ***REMOVED***
	return m.Copy()
***REMOVED***

func (m *Extension) GetMeta() Meta ***REMOVED***
	return m.Meta
***REMOVED***

func (m *Extension) SetMeta(meta Meta) ***REMOVED***
	m.Meta = meta
***REMOVED***

func (m *Extension) GetID() string ***REMOVED***
	return m.ID
***REMOVED***

func (m *Extension) EventCreate() Event ***REMOVED***
	return EventCreateExtension***REMOVED***Extension: m***REMOVED***
***REMOVED***

func (m *Extension) EventUpdate(oldObject StoreObject) Event ***REMOVED***
	if oldObject != nil ***REMOVED***
		return EventUpdateExtension***REMOVED***Extension: m, OldExtension: oldObject.(*Extension)***REMOVED***
	***REMOVED*** else ***REMOVED***
		return EventUpdateExtension***REMOVED***Extension: m***REMOVED***
	***REMOVED***
***REMOVED***

func (m *Extension) EventDelete() Event ***REMOVED***
	return EventDeleteExtension***REMOVED***Extension: m***REMOVED***
***REMOVED***

func ExtensionCheckID(v1, v2 *Extension) bool ***REMOVED***
	return v1.ID == v2.ID
***REMOVED***

func ExtensionCheckIDPrefix(v1, v2 *Extension) bool ***REMOVED***
	return strings.HasPrefix(v2.ID, v1.ID)
***REMOVED***

func ExtensionCheckName(v1, v2 *Extension) bool ***REMOVED***
	return v1.Annotations.Name == v2.Annotations.Name
***REMOVED***

func ExtensionCheckNamePrefix(v1, v2 *Extension) bool ***REMOVED***
	return strings.HasPrefix(v2.Annotations.Name, v1.Annotations.Name)
***REMOVED***

func ExtensionCheckCustom(v1, v2 *Extension) bool ***REMOVED***
	return checkCustom(v1.Annotations, v2.Annotations)
***REMOVED***

func ExtensionCheckCustomPrefix(v1, v2 *Extension) bool ***REMOVED***
	return checkCustomPrefix(v1.Annotations, v2.Annotations)
***REMOVED***

func ConvertExtensionWatch(action WatchActionKind, filters []*SelectBy) ([]Event, error) ***REMOVED***
	var (
		m          Extension
		checkFuncs []ExtensionCheckFunc
	)

	for _, filter := range filters ***REMOVED***
		switch v := filter.By.(type) ***REMOVED***
		case *SelectBy_ID:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.ID
			checkFuncs = append(checkFuncs, ExtensionCheckID)
		case *SelectBy_IDPrefix:
			if m.ID != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.ID = v.IDPrefix
			checkFuncs = append(checkFuncs, ExtensionCheckIDPrefix)
		case *SelectBy_Name:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.Name
			checkFuncs = append(checkFuncs, ExtensionCheckName)
		case *SelectBy_NamePrefix:
			if m.Annotations.Name != "" ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Name = v.NamePrefix
			checkFuncs = append(checkFuncs, ExtensionCheckNamePrefix)
		case *SelectBy_Custom:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.Custom.Index, Val: v.Custom.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ExtensionCheckCustom)
		case *SelectBy_CustomPrefix:
			if len(m.Annotations.Indices) != 0 ***REMOVED***
				return nil, errConflictingFilters
			***REMOVED***
			m.Annotations.Indices = []IndexEntry***REMOVED******REMOVED***Key: v.CustomPrefix.Index, Val: v.CustomPrefix.Value***REMOVED******REMOVED***
			checkFuncs = append(checkFuncs, ExtensionCheckCustomPrefix)
		***REMOVED***
	***REMOVED***
	var events []Event
	if (action & WatchActionKindCreate) != 0 ***REMOVED***
		events = append(events, EventCreateExtension***REMOVED***Extension: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindUpdate) != 0 ***REMOVED***
		events = append(events, EventUpdateExtension***REMOVED***Extension: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if (action & WatchActionKindRemove) != 0 ***REMOVED***
		events = append(events, EventDeleteExtension***REMOVED***Extension: &m, Checks: checkFuncs***REMOVED***)
	***REMOVED***
	if len(events) == 0 ***REMOVED***
		return nil, errUnrecognizedAction
	***REMOVED***
	return events, nil
***REMOVED***

type ExtensionIndexerByID struct***REMOVED******REMOVED***

func (indexer ExtensionIndexerByID) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ExtensionIndexerByID) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ExtensionIndexerByID) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Extension)
	return true, []byte(m.ID + "\x00"), nil
***REMOVED***

type ExtensionIndexerByName struct***REMOVED******REMOVED***

func (indexer ExtensionIndexerByName) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ExtensionIndexerByName) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ExtensionIndexerByName) FromObject(obj interface***REMOVED******REMOVED***) (bool, []byte, error) ***REMOVED***
	m := obj.(*Extension)
	val := m.Annotations.Name
	return true, []byte(strings.ToLower(val) + "\x00"), nil
***REMOVED***

type ExtensionCustomIndexer struct***REMOVED******REMOVED***

func (indexer ExtensionCustomIndexer) FromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return fromArgs(args...)
***REMOVED***
func (indexer ExtensionCustomIndexer) PrefixFromArgs(args ...interface***REMOVED******REMOVED***) ([]byte, error) ***REMOVED***
	return prefixFromArgs(args...)
***REMOVED***
func (indexer ExtensionCustomIndexer) FromObject(obj interface***REMOVED******REMOVED***) (bool, [][]byte, error) ***REMOVED***
	m := obj.(*Extension)
	return customIndexer("", &m.Annotations)
***REMOVED***
func NewStoreAction(c Event) (StoreAction, error) ***REMOVED***
	var sa StoreAction
	switch v := c.(type) ***REMOVED***
	case EventCreateNode:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Node***REMOVED***Node: v.Node***REMOVED***
	case EventUpdateNode:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Node***REMOVED***Node: v.Node***REMOVED***
	case EventDeleteNode:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Node***REMOVED***Node: v.Node***REMOVED***
	case EventCreateService:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Service***REMOVED***Service: v.Service***REMOVED***
	case EventUpdateService:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Service***REMOVED***Service: v.Service***REMOVED***
	case EventDeleteService:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Service***REMOVED***Service: v.Service***REMOVED***
	case EventCreateTask:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Task***REMOVED***Task: v.Task***REMOVED***
	case EventUpdateTask:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Task***REMOVED***Task: v.Task***REMOVED***
	case EventDeleteTask:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Task***REMOVED***Task: v.Task***REMOVED***
	case EventCreateNetwork:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Network***REMOVED***Network: v.Network***REMOVED***
	case EventUpdateNetwork:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Network***REMOVED***Network: v.Network***REMOVED***
	case EventDeleteNetwork:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Network***REMOVED***Network: v.Network***REMOVED***
	case EventCreateCluster:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Cluster***REMOVED***Cluster: v.Cluster***REMOVED***
	case EventUpdateCluster:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Cluster***REMOVED***Cluster: v.Cluster***REMOVED***
	case EventDeleteCluster:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Cluster***REMOVED***Cluster: v.Cluster***REMOVED***
	case EventCreateSecret:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Secret***REMOVED***Secret: v.Secret***REMOVED***
	case EventUpdateSecret:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Secret***REMOVED***Secret: v.Secret***REMOVED***
	case EventDeleteSecret:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Secret***REMOVED***Secret: v.Secret***REMOVED***
	case EventCreateConfig:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Config***REMOVED***Config: v.Config***REMOVED***
	case EventUpdateConfig:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Config***REMOVED***Config: v.Config***REMOVED***
	case EventDeleteConfig:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Config***REMOVED***Config: v.Config***REMOVED***
	case EventCreateResource:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Resource***REMOVED***Resource: v.Resource***REMOVED***
	case EventUpdateResource:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Resource***REMOVED***Resource: v.Resource***REMOVED***
	case EventDeleteResource:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Resource***REMOVED***Resource: v.Resource***REMOVED***
	case EventCreateExtension:
		sa.Action = StoreActionKindCreate
		sa.Target = &StoreAction_Extension***REMOVED***Extension: v.Extension***REMOVED***
	case EventUpdateExtension:
		sa.Action = StoreActionKindUpdate
		sa.Target = &StoreAction_Extension***REMOVED***Extension: v.Extension***REMOVED***
	case EventDeleteExtension:
		sa.Action = StoreActionKindRemove
		sa.Target = &StoreAction_Extension***REMOVED***Extension: v.Extension***REMOVED***
	default:
		return StoreAction***REMOVED******REMOVED***, errUnknownStoreAction
	***REMOVED***
	return sa, nil
***REMOVED***

func EventFromStoreAction(sa StoreAction, oldObject StoreObject) (Event, error) ***REMOVED***
	switch v := sa.Target.(type) ***REMOVED***
	case *StoreAction_Node:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateNode***REMOVED***Node: v.Node***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateNode***REMOVED***Node: v.Node, OldNode: oldObject.(*Node)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateNode***REMOVED***Node: v.Node***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteNode***REMOVED***Node: v.Node***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Service:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateService***REMOVED***Service: v.Service***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateService***REMOVED***Service: v.Service, OldService: oldObject.(*Service)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateService***REMOVED***Service: v.Service***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteService***REMOVED***Service: v.Service***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Task:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateTask***REMOVED***Task: v.Task***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateTask***REMOVED***Task: v.Task, OldTask: oldObject.(*Task)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateTask***REMOVED***Task: v.Task***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteTask***REMOVED***Task: v.Task***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Network:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateNetwork***REMOVED***Network: v.Network***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateNetwork***REMOVED***Network: v.Network, OldNetwork: oldObject.(*Network)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateNetwork***REMOVED***Network: v.Network***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteNetwork***REMOVED***Network: v.Network***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Cluster:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateCluster***REMOVED***Cluster: v.Cluster***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateCluster***REMOVED***Cluster: v.Cluster, OldCluster: oldObject.(*Cluster)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateCluster***REMOVED***Cluster: v.Cluster***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteCluster***REMOVED***Cluster: v.Cluster***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Secret:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateSecret***REMOVED***Secret: v.Secret***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateSecret***REMOVED***Secret: v.Secret, OldSecret: oldObject.(*Secret)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateSecret***REMOVED***Secret: v.Secret***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteSecret***REMOVED***Secret: v.Secret***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Config:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateConfig***REMOVED***Config: v.Config***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateConfig***REMOVED***Config: v.Config, OldConfig: oldObject.(*Config)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateConfig***REMOVED***Config: v.Config***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteConfig***REMOVED***Config: v.Config***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Resource:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateResource***REMOVED***Resource: v.Resource***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateResource***REMOVED***Resource: v.Resource, OldResource: oldObject.(*Resource)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateResource***REMOVED***Resource: v.Resource***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteResource***REMOVED***Resource: v.Resource***REMOVED***, nil
		***REMOVED***
	case *StoreAction_Extension:
		switch sa.Action ***REMOVED***
		case StoreActionKindCreate:
			return EventCreateExtension***REMOVED***Extension: v.Extension***REMOVED***, nil
		case StoreActionKindUpdate:
			if oldObject != nil ***REMOVED***
				return EventUpdateExtension***REMOVED***Extension: v.Extension, OldExtension: oldObject.(*Extension)***REMOVED***, nil
			***REMOVED*** else ***REMOVED***
				return EventUpdateExtension***REMOVED***Extension: v.Extension***REMOVED***, nil
			***REMOVED***
		case StoreActionKindRemove:
			return EventDeleteExtension***REMOVED***Extension: v.Extension***REMOVED***, nil
		***REMOVED***
	***REMOVED***
	return nil, errUnknownStoreAction
***REMOVED***

func WatchMessageEvent(c Event) *WatchMessage_Event ***REMOVED***
	switch v := c.(type) ***REMOVED***
	case EventCreateNode:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Node***REMOVED***Node: v.Node***REMOVED******REMOVED******REMOVED***
	case EventUpdateNode:
		if v.OldNode != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Node***REMOVED***Node: v.Node***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Node***REMOVED***Node: v.OldNode***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Node***REMOVED***Node: v.Node***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteNode:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Node***REMOVED***Node: v.Node***REMOVED******REMOVED******REMOVED***
	case EventCreateService:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Service***REMOVED***Service: v.Service***REMOVED******REMOVED******REMOVED***
	case EventUpdateService:
		if v.OldService != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Service***REMOVED***Service: v.Service***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Service***REMOVED***Service: v.OldService***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Service***REMOVED***Service: v.Service***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteService:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Service***REMOVED***Service: v.Service***REMOVED******REMOVED******REMOVED***
	case EventCreateTask:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Task***REMOVED***Task: v.Task***REMOVED******REMOVED******REMOVED***
	case EventUpdateTask:
		if v.OldTask != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Task***REMOVED***Task: v.Task***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Task***REMOVED***Task: v.OldTask***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Task***REMOVED***Task: v.Task***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteTask:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Task***REMOVED***Task: v.Task***REMOVED******REMOVED******REMOVED***
	case EventCreateNetwork:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Network***REMOVED***Network: v.Network***REMOVED******REMOVED******REMOVED***
	case EventUpdateNetwork:
		if v.OldNetwork != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Network***REMOVED***Network: v.Network***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Network***REMOVED***Network: v.OldNetwork***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Network***REMOVED***Network: v.Network***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteNetwork:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Network***REMOVED***Network: v.Network***REMOVED******REMOVED******REMOVED***
	case EventCreateCluster:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Cluster***REMOVED***Cluster: v.Cluster***REMOVED******REMOVED******REMOVED***
	case EventUpdateCluster:
		if v.OldCluster != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Cluster***REMOVED***Cluster: v.Cluster***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Cluster***REMOVED***Cluster: v.OldCluster***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Cluster***REMOVED***Cluster: v.Cluster***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteCluster:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Cluster***REMOVED***Cluster: v.Cluster***REMOVED******REMOVED******REMOVED***
	case EventCreateSecret:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Secret***REMOVED***Secret: v.Secret***REMOVED******REMOVED******REMOVED***
	case EventUpdateSecret:
		if v.OldSecret != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Secret***REMOVED***Secret: v.Secret***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Secret***REMOVED***Secret: v.OldSecret***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Secret***REMOVED***Secret: v.Secret***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteSecret:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Secret***REMOVED***Secret: v.Secret***REMOVED******REMOVED******REMOVED***
	case EventCreateConfig:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Config***REMOVED***Config: v.Config***REMOVED******REMOVED******REMOVED***
	case EventUpdateConfig:
		if v.OldConfig != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Config***REMOVED***Config: v.Config***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Config***REMOVED***Config: v.OldConfig***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Config***REMOVED***Config: v.Config***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteConfig:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Config***REMOVED***Config: v.Config***REMOVED******REMOVED******REMOVED***
	case EventCreateResource:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Resource***REMOVED***Resource: v.Resource***REMOVED******REMOVED******REMOVED***
	case EventUpdateResource:
		if v.OldResource != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Resource***REMOVED***Resource: v.Resource***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Resource***REMOVED***Resource: v.OldResource***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Resource***REMOVED***Resource: v.Resource***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteResource:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Resource***REMOVED***Resource: v.Resource***REMOVED******REMOVED******REMOVED***
	case EventCreateExtension:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindCreate, Object: &Object***REMOVED***Object: &Object_Extension***REMOVED***Extension: v.Extension***REMOVED******REMOVED******REMOVED***
	case EventUpdateExtension:
		if v.OldExtension != nil ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Extension***REMOVED***Extension: v.Extension***REMOVED******REMOVED***, OldObject: &Object***REMOVED***Object: &Object_Extension***REMOVED***Extension: v.OldExtension***REMOVED******REMOVED******REMOVED***
		***REMOVED*** else ***REMOVED***
			return &WatchMessage_Event***REMOVED***Action: WatchActionKindUpdate, Object: &Object***REMOVED***Object: &Object_Extension***REMOVED***Extension: v.Extension***REMOVED******REMOVED******REMOVED***
		***REMOVED***
	case EventDeleteExtension:
		return &WatchMessage_Event***REMOVED***Action: WatchActionKindRemove, Object: &Object***REMOVED***Object: &Object_Extension***REMOVED***Extension: v.Extension***REMOVED******REMOVED******REMOVED***
	***REMOVED***
	return nil
***REMOVED***

func ConvertWatchArgs(entries []*WatchRequest_WatchEntry) ([]Event, error) ***REMOVED***
	var events []Event
	for _, entry := range entries ***REMOVED***
		var newEvents []Event
		var err error
		switch entry.Kind ***REMOVED***
		case "":
			return nil, errNoKindSpecified
		case "node":
			newEvents, err = ConvertNodeWatch(entry.Action, entry.Filters)
		case "service":
			newEvents, err = ConvertServiceWatch(entry.Action, entry.Filters)
		case "task":
			newEvents, err = ConvertTaskWatch(entry.Action, entry.Filters)
		case "network":
			newEvents, err = ConvertNetworkWatch(entry.Action, entry.Filters)
		case "cluster":
			newEvents, err = ConvertClusterWatch(entry.Action, entry.Filters)
		case "secret":
			newEvents, err = ConvertSecretWatch(entry.Action, entry.Filters)
		case "config":
			newEvents, err = ConvertConfigWatch(entry.Action, entry.Filters)
		default:
			newEvents, err = ConvertResourceWatch(entry.Action, entry.Filters, entry.Kind)
		case "extension":
			newEvents, err = ConvertExtensionWatch(entry.Action, entry.Filters)
		***REMOVED***
		if err != nil ***REMOVED***
			return nil, err
		***REMOVED***
		events = append(events, newEvents...)
	***REMOVED***
	return events, nil
***REMOVED***

func (this *Meta) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Meta***REMOVED***`,
		`Version:` + strings.Replace(strings.Replace(this.Version.String(), "Version", "Version", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "google_protobuf.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "google_protobuf.Timestamp", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Node) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Node***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "NodeSpec", "NodeSpec", 1), `&`, ``, 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "NodeDescription", "NodeDescription", 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "NodeStatus", "NodeStatus", 1), `&`, ``, 1) + `,`,
		`ManagerStatus:` + strings.Replace(fmt.Sprintf("%v", this.ManagerStatus), "ManagerStatus", "ManagerStatus", 1) + `,`,
		`Attachment:` + strings.Replace(fmt.Sprintf("%v", this.Attachment), "NetworkAttachment", "NetworkAttachment", 1) + `,`,
		`Certificate:` + strings.Replace(strings.Replace(this.Certificate.String(), "Certificate", "Certificate", 1), `&`, ``, 1) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`Attachments:` + strings.Replace(fmt.Sprintf("%v", this.Attachments), "NetworkAttachment", "NetworkAttachment", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Service) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Service***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ServiceSpec", "ServiceSpec", 1), `&`, ``, 1) + `,`,
		`Endpoint:` + strings.Replace(fmt.Sprintf("%v", this.Endpoint), "Endpoint", "Endpoint", 1) + `,`,
		`UpdateStatus:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStatus), "UpdateStatus", "UpdateStatus", 1) + `,`,
		`PreviousSpec:` + strings.Replace(fmt.Sprintf("%v", this.PreviousSpec), "ServiceSpec", "ServiceSpec", 1) + `,`,
		`SpecVersion:` + strings.Replace(fmt.Sprintf("%v", this.SpecVersion), "Version", "Version", 1) + `,`,
		`PreviousSpecVersion:` + strings.Replace(fmt.Sprintf("%v", this.PreviousSpecVersion), "Version", "Version", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Endpoint) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Endpoint***REMOVED***`,
		`Spec:` + strings.Replace(fmt.Sprintf("%v", this.Spec), "EndpointSpec", "EndpointSpec", 1) + `,`,
		`Ports:` + strings.Replace(fmt.Sprintf("%v", this.Ports), "PortConfig", "PortConfig", 1) + `,`,
		`VirtualIPs:` + strings.Replace(fmt.Sprintf("%v", this.VirtualIPs), "Endpoint_VirtualIP", "Endpoint_VirtualIP", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Endpoint_VirtualIP) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Endpoint_VirtualIP***REMOVED***`,
		`NetworkID:` + fmt.Sprintf("%v", this.NetworkID) + `,`,
		`Addr:` + fmt.Sprintf("%v", this.Addr) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Task) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Task***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "TaskSpec", "TaskSpec", 1), `&`, ``, 1) + `,`,
		`ServiceID:` + fmt.Sprintf("%v", this.ServiceID) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Annotations:` + strings.Replace(strings.Replace(this.Annotations.String(), "Annotations", "Annotations", 1), `&`, ``, 1) + `,`,
		`ServiceAnnotations:` + strings.Replace(strings.Replace(this.ServiceAnnotations.String(), "Annotations", "Annotations", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "TaskStatus", "TaskStatus", 1), `&`, ``, 1) + `,`,
		`DesiredState:` + fmt.Sprintf("%v", this.DesiredState) + `,`,
		`Networks:` + strings.Replace(fmt.Sprintf("%v", this.Networks), "NetworkAttachment", "NetworkAttachment", 1) + `,`,
		`Endpoint:` + strings.Replace(fmt.Sprintf("%v", this.Endpoint), "Endpoint", "Endpoint", 1) + `,`,
		`LogDriver:` + strings.Replace(fmt.Sprintf("%v", this.LogDriver), "Driver", "Driver", 1) + `,`,
		`SpecVersion:` + strings.Replace(fmt.Sprintf("%v", this.SpecVersion), "Version", "Version", 1) + `,`,
		`AssignedGenericResources:` + strings.Replace(fmt.Sprintf("%v", this.AssignedGenericResources), "GenericResource", "GenericResource", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *NetworkAttachment) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	keysForDriverAttachmentOpts := make([]string, 0, len(this.DriverAttachmentOpts))
	for k, _ := range this.DriverAttachmentOpts ***REMOVED***
		keysForDriverAttachmentOpts = append(keysForDriverAttachmentOpts, k)
	***REMOVED***
	github_com_gogo_protobuf_sortkeys.Strings(keysForDriverAttachmentOpts)
	mapStringForDriverAttachmentOpts := "map[string]string***REMOVED***"
	for _, k := range keysForDriverAttachmentOpts ***REMOVED***
		mapStringForDriverAttachmentOpts += fmt.Sprintf("%v: %v,", k, this.DriverAttachmentOpts[k])
	***REMOVED***
	mapStringForDriverAttachmentOpts += "***REMOVED***"
	s := strings.Join([]string***REMOVED***`&NetworkAttachment***REMOVED***`,
		`Network:` + strings.Replace(fmt.Sprintf("%v", this.Network), "Network", "Network", 1) + `,`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`Aliases:` + fmt.Sprintf("%v", this.Aliases) + `,`,
		`DriverAttachmentOpts:` + mapStringForDriverAttachmentOpts + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Network) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Network***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "NetworkSpec", "NetworkSpec", 1), `&`, ``, 1) + `,`,
		`DriverState:` + strings.Replace(fmt.Sprintf("%v", this.DriverState), "Driver", "Driver", 1) + `,`,
		`IPAM:` + strings.Replace(fmt.Sprintf("%v", this.IPAM), "IPAMOptions", "IPAMOptions", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Cluster) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	keysForBlacklistedCertificates := make([]string, 0, len(this.BlacklistedCertificates))
	for k, _ := range this.BlacklistedCertificates ***REMOVED***
		keysForBlacklistedCertificates = append(keysForBlacklistedCertificates, k)
	***REMOVED***
	github_com_gogo_protobuf_sortkeys.Strings(keysForBlacklistedCertificates)
	mapStringForBlacklistedCertificates := "map[string]*BlacklistedCertificate***REMOVED***"
	for _, k := range keysForBlacklistedCertificates ***REMOVED***
		mapStringForBlacklistedCertificates += fmt.Sprintf("%v: %v,", k, this.BlacklistedCertificates[k])
	***REMOVED***
	mapStringForBlacklistedCertificates += "***REMOVED***"
	s := strings.Join([]string***REMOVED***`&Cluster***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterSpec", "ClusterSpec", 1), `&`, ``, 1) + `,`,
		`RootCA:` + strings.Replace(strings.Replace(this.RootCA.String(), "RootCA", "RootCA", 1), `&`, ``, 1) + `,`,
		`NetworkBootstrapKeys:` + strings.Replace(fmt.Sprintf("%v", this.NetworkBootstrapKeys), "EncryptionKey", "EncryptionKey", 1) + `,`,
		`EncryptionKeyLamportClock:` + fmt.Sprintf("%v", this.EncryptionKeyLamportClock) + `,`,
		`BlacklistedCertificates:` + mapStringForBlacklistedCertificates + `,`,
		`UnlockKeys:` + strings.Replace(fmt.Sprintf("%v", this.UnlockKeys), "EncryptionKey", "EncryptionKey", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Secret) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Secret***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "SecretSpec", "SecretSpec", 1), `&`, ``, 1) + `,`,
		`Internal:` + fmt.Sprintf("%v", this.Internal) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Config) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Config***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ConfigSpec", "ConfigSpec", 1), `&`, ``, 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Resource) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Resource***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Annotations:` + strings.Replace(strings.Replace(this.Annotations.String(), "Annotations", "Annotations", 1), `&`, ``, 1) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Any", "google_protobuf3.Any", 1) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func (this *Extension) String() string ***REMOVED***
	if this == nil ***REMOVED***
		return "nil"
	***REMOVED***
	s := strings.Join([]string***REMOVED***`&Extension***REMOVED***`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Meta:` + strings.Replace(strings.Replace(this.Meta.String(), "Meta", "Meta", 1), `&`, ``, 1) + `,`,
		`Annotations:` + strings.Replace(strings.Replace(this.Annotations.String(), "Annotations", "Annotations", 1), `&`, ``, 1) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`***REMOVED***`,
	***REMOVED***, "")
	return s
***REMOVED***
func valueToStringObjects(v interface***REMOVED******REMOVED***) string ***REMOVED***
	rv := reflect.ValueOf(v)
	if rv.IsNil() ***REMOVED***
		return "nil"
	***REMOVED***
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
***REMOVED***
func (m *Meta) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.CreatedAt == nil ***REMOVED***
				m.CreatedAt = &google_protobuf.Timestamp***REMOVED******REMOVED***
			***REMOVED***
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.UpdatedAt == nil ***REMOVED***
				m.UpdatedAt = &google_protobuf.Timestamp***REMOVED******REMOVED***
			***REMOVED***
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Node) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Description == nil ***REMOVED***
				m.Description = &NodeDescription***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 6:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerStatus", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.ManagerStatus == nil ***REMOVED***
				m.ManagerStatus = &ManagerStatus***REMOVED******REMOVED***
			***REMOVED***
			if err := m.ManagerStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 7:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Attachment", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Attachment == nil ***REMOVED***
				m.Attachment = &NetworkAttachment***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Attachment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 8:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Certificate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 9:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			***REMOVED***
			m.Role = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (NodeRole(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		case 10:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Attachments = append(m.Attachments, &NetworkAttachment***REMOVED******REMOVED***)
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Service) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Endpoint == nil ***REMOVED***
				m.Endpoint = &Endpoint***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStatus", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.UpdateStatus == nil ***REMOVED***
				m.UpdateStatus = &UpdateStatus***REMOVED******REMOVED***
			***REMOVED***
			if err := m.UpdateStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 6:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousSpec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.PreviousSpec == nil ***REMOVED***
				m.PreviousSpec = &ServiceSpec***REMOVED******REMOVED***
			***REMOVED***
			if err := m.PreviousSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 10:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field SpecVersion", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.SpecVersion == nil ***REMOVED***
				m.SpecVersion = &Version***REMOVED******REMOVED***
			***REMOVED***
			if err := m.SpecVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 11:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousSpecVersion", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.PreviousSpecVersion == nil ***REMOVED***
				m.PreviousSpecVersion = &Version***REMOVED******REMOVED***
			***REMOVED***
			if err := m.PreviousSpecVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Endpoint) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Spec == nil ***REMOVED***
				m.Spec = &EndpointSpec***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Ports = append(m.Ports, &PortConfig***REMOVED******REMOVED***)
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field VirtualIPs", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.VirtualIPs = append(m.VirtualIPs, &Endpoint_VirtualIP***REMOVED******REMOVED***)
			if err := m.VirtualIPs[len(m.VirtualIPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Endpoint_VirtualIP) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: VirtualIP: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: VirtualIP: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.NetworkID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Task) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ServiceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			***REMOVED***
			m.Slot = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		case 6:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 8:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAnnotations", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.ServiceAnnotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 9:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 10:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredState", wireType)
			***REMOVED***
			m.DesiredState = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredState |= (TaskState(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		case 11:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Networks = append(m.Networks, &NetworkAttachment***REMOVED******REMOVED***)
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 12:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Endpoint == nil ***REMOVED***
				m.Endpoint = &Endpoint***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Endpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 13:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field LogDriver", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.LogDriver == nil ***REMOVED***
				m.LogDriver = &Driver***REMOVED******REMOVED***
			***REMOVED***
			if err := m.LogDriver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 14:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field SpecVersion", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.SpecVersion == nil ***REMOVED***
				m.SpecVersion = &Version***REMOVED******REMOVED***
			***REMOVED***
			if err := m.SpecVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 15:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedGenericResources", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.AssignedGenericResources = append(m.AssignedGenericResources, &GenericResource***REMOVED******REMOVED***)
			if err := m.AssignedGenericResources[len(m.AssignedGenericResources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *NetworkAttachment) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: NetworkAttachment: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: NetworkAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Network == nil ***REMOVED***
				m.Network = &Network***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field DriverAttachmentOpts", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			var keykey uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.DriverAttachmentOpts == nil ***REMOVED***
				m.DriverAttachmentOpts = make(map[string]string)
			***REMOVED***
			if iNdEx < postIndex ***REMOVED***
				var valuekey uint64
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowObjects
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowObjects
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 ***REMOVED***
					return ErrInvalidLengthObjects
				***REMOVED***
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.DriverAttachmentOpts[mapkey] = mapvalue
			***REMOVED*** else ***REMOVED***
				var mapvalue string
				m.DriverAttachmentOpts[mapkey] = mapvalue
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Network) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Network: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Network: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field DriverState", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.DriverState == nil ***REMOVED***
				m.DriverState = &Driver***REMOVED******REMOVED***
			***REMOVED***
			if err := m.DriverState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field IPAM", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.IPAM == nil ***REMOVED***
				m.IPAM = &IPAMOptions***REMOVED******REMOVED***
			***REMOVED***
			if err := m.IPAM.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Cluster) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field RootCA", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.RootCA.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkBootstrapKeys", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.NetworkBootstrapKeys = append(m.NetworkBootstrapKeys, &EncryptionKey***REMOVED******REMOVED***)
			if err := m.NetworkBootstrapKeys[len(m.NetworkBootstrapKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 6:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKeyLamportClock", wireType)
			***REMOVED***
			m.EncryptionKeyLamportClock = 0
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionKeyLamportClock |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
		case 8:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedCertificates", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			var keykey uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.BlacklistedCertificates == nil ***REMOVED***
				m.BlacklistedCertificates = make(map[string]*BlacklistedCertificate)
			***REMOVED***
			if iNdEx < postIndex ***REMOVED***
				var valuekey uint64
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowObjects
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				var mapmsglen int
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return ErrIntOverflowObjects
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				if mapmsglen < 0 ***REMOVED***
					return ErrInvalidLengthObjects
				***REMOVED***
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 ***REMOVED***
					return ErrInvalidLengthObjects
				***REMOVED***
				if postmsgIndex > l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				mapvalue := &BlacklistedCertificate***REMOVED******REMOVED***
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil ***REMOVED***
					return err
				***REMOVED***
				iNdEx = postmsgIndex
				m.BlacklistedCertificates[mapkey] = mapvalue
			***REMOVED*** else ***REMOVED***
				var mapvalue *BlacklistedCertificate
				m.BlacklistedCertificates[mapkey] = mapvalue
			***REMOVED***
			iNdEx = postIndex
		case 9:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockKeys", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.UnlockKeys = append(m.UnlockKeys, &EncryptionKey***REMOVED******REMOVED***)
			if err := m.UnlockKeys[len(m.UnlockKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Secret) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Secret: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Secret: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 0 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			***REMOVED***
			var v int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			m.Internal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Config) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Resource) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if m.Payload == nil ***REMOVED***
				m.Payload = &google_protobuf3.Any***REMOVED******REMOVED***
			***REMOVED***
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func (m *Extension) Unmarshal(dAtA []byte) error ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 ***REMOVED***
			return fmt.Errorf("proto: Extension: wiretype end group for non-group")
		***REMOVED***
		if fieldNum <= 0 ***REMOVED***
			return fmt.Errorf("proto: Extension: illegal tag %d (wire type %d)", fieldNum, wire)
		***REMOVED***
		switch fieldNum ***REMOVED***
		case 1:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 3:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			***REMOVED***
			var msglen int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			if msglen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + msglen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			if err := m.Annotations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil ***REMOVED***
				return err
			***REMOVED***
			iNdEx = postIndex
		case 4:
			if wireType != 2 ***REMOVED***
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			***REMOVED***
			var stringLen uint64
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			intStringLen := int(stringLen)
			if intStringLen < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			postIndex := iNdEx + intStringLen
			if postIndex > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjects(dAtA[iNdEx:])
			if err != nil ***REMOVED***
				return err
			***REMOVED***
			if skippy < 0 ***REMOVED***
				return ErrInvalidLengthObjects
			***REMOVED***
			if (iNdEx + skippy) > l ***REMOVED***
				return io.ErrUnexpectedEOF
			***REMOVED***
			iNdEx += skippy
		***REMOVED***
	***REMOVED***

	if iNdEx > l ***REMOVED***
		return io.ErrUnexpectedEOF
	***REMOVED***
	return nil
***REMOVED***
func skipObjects(dAtA []byte) (n int, err error) ***REMOVED***
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l ***REMOVED***
		var wire uint64
		for shift := uint(0); ; shift += 7 ***REMOVED***
			if shift >= 64 ***REMOVED***
				return 0, ErrIntOverflowObjects
			***REMOVED***
			if iNdEx >= l ***REMOVED***
				return 0, io.ErrUnexpectedEOF
			***REMOVED***
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 ***REMOVED***
				break
			***REMOVED***
		***REMOVED***
		wireType := int(wire & 0x7)
		switch wireType ***REMOVED***
		case 0:
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 ***REMOVED***
				if shift >= 64 ***REMOVED***
					return 0, ErrIntOverflowObjects
				***REMOVED***
				if iNdEx >= l ***REMOVED***
					return 0, io.ErrUnexpectedEOF
				***REMOVED***
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 ***REMOVED***
					break
				***REMOVED***
			***REMOVED***
			iNdEx += length
			if length < 0 ***REMOVED***
				return 0, ErrInvalidLengthObjects
			***REMOVED***
			return iNdEx, nil
		case 3:
			for ***REMOVED***
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 ***REMOVED***
					if shift >= 64 ***REMOVED***
						return 0, ErrIntOverflowObjects
					***REMOVED***
					if iNdEx >= l ***REMOVED***
						return 0, io.ErrUnexpectedEOF
					***REMOVED***
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 ***REMOVED***
						break
					***REMOVED***
				***REMOVED***
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 ***REMOVED***
					break
				***REMOVED***
				next, err := skipObjects(dAtA[start:])
				if err != nil ***REMOVED***
					return 0, err
				***REMOVED***
				iNdEx = start + next
			***REMOVED***
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		***REMOVED***
	***REMOVED***
	panic("unreachable")
***REMOVED***

var (
	ErrInvalidLengthObjects = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjects   = fmt.Errorf("proto: integer overflow")
)

func init() ***REMOVED*** proto.RegisterFile("github.com/docker/swarmkit/api/objects.proto", fileDescriptorObjects) ***REMOVED***

var fileDescriptorObjects = []byte***REMOVED***
	// 1527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x1b, 0x4f,
	0x15, 0xef, 0xda, 0x1b, 0xff, 0x78, 0x4e, 0x4c, 0x98, 0x86, 0xb0, 0x35, 0xc1, 0x0e, 0xae, 0x40,
	0x55, 0x55, 0x39, 0x25, 0x14, 0x48, 0x03, 0xa5, 0xb5, 0x93, 0xa8, 0xb5, 0x4a, 0x69, 0x34, 0x2d,
	0x2d, 0xb7, 0x65, 0xb2, 0x3b, 0x75, 0x17, 0xaf, 0x77, 0x56, 0x3b, 0x63, 0x17, 0xdf, 0x7a, 0x0e,
	0x7f, 0x40, 0x6e, 0x1c, 0xfa, 0x37, 0x70, 0xe1, 0xc2, 0x81, 0x53, 0x8f, 0x9c, 0x10, 0xa7, 0x88,
	0xfa, 0xbf, 0x40, 0xe2, 0x80, 0x66, 0x76, 0xd6, 0xde, 0xc4, 0x9b, 0x5f, 0xa8, 0x8a, 0xbe, 0xa7,
	0xcc, 0xec, 0x7c, 0x3e, 0xef, 0xd7, 0xbc, 0xf7, 0xe6, 0xc5, 0x70, 0xaf, 0xe7, 0x89, 0xf7, 0xc3,
	0x83, 0x96, 0xc3, 0x06, 0x1b, 0x2e, 0x73, 0xfa, 0x34, 0xda, 0xe0, 0x1f, 0x48, 0x34, 0xe8, 0x7b,
	0x62, 0x83, 0x84, 0xde, 0x06, 0x3b, 0xf8, 0x03, 0x75, 0x04, 0x6f, 0x85, 0x11, 0x13, 0x0c, 0xa1,
	0x18, 0xd2, 0x4a, 0x20, 0xad, 0xd1, 0x8f, 0x6b, 0x77, 0x2f, 0x90, 0x20, 0xc6, 0x21, 0xd5, 0xfc,
	0x0b, 0xb1, 0x3c, 0xa4, 0x4e, 0x82, 0x6d, 0xf4, 0x18, 0xeb, 0xf9, 0x74, 0x43, 0xed, 0x0e, 0x86,
	0xef, 0x36, 0x84, 0x37, 0xa0, 0x5c, 0x90, 0x41, 0xa8, 0x01, 0x2b, 0x3d, 0xd6, 0x63, 0x6a, 0xb9,
	0x21, 0x57, 0xfa, 0xeb, 0xad, 0xd3, 0x34, 0x12, 0x8c, 0xf5, 0xd1, 0xcf, 0xcf, 0xd1, 0x3e, 0x85,
	0x87, 0xfe, 0xb0, 0xe7, 0x05, 0xfa, 0x4f, 0x4c, 0x6c, 0xfe, 0xd5, 0x00, 0xf3, 0x05, 0x15, 0x04,
	0xfd, 0x02, 0x8a, 0x23, 0x1a, 0x71, 0x8f, 0x05, 0x96, 0xb1, 0x6e, 0xdc, 0xa9, 0x6c, 0x7e, 0xaf,
	0x35, 0x1f, 0x91, 0xd6, 0x9b, 0x18, 0xd2, 0x31, 0x3f, 0x1f, 0x37, 0x6e, 0xe0, 0x84, 0x81, 0x1e,
	0x02, 0x38, 0x11, 0x25, 0x82, 0xba, 0x36, 0x11, 0x56, 0x4e, 0xf1, 0x6b, 0xad, 0xd8, 0xdc, 0x56,
	0xa2, 0xbf, 0xf5, 0x3a, 0xf1, 0x12, 0x97, 0x35, 0xba, 0x2d, 0x24, 0x75, 0x18, 0xba, 0x09, 0x35,
	0x7f, 0x31, 0x55, 0xa3, 0xdb, 0xa2, 0xf9, 0x71, 0x01, 0xcc, 0xdf, 0x30, 0x97, 0xa2, 0x55, 0xc8,
	0x79, 0xae, 0x32, 0xbb, 0xdc, 0x29, 0x4c, 0x8e, 0x1b, 0xb9, 0xee, 0x2e, 0xce, 0x79, 0x2e, 0xda,
	0x04, 0x73, 0x40, 0x05, 0xd1, 0x06, 0x59, 0x59, 0x0e, 0x49, 0xdf, 0xb5, 0x37, 0x0a, 0x8b, 0x7e,
	0x06, 0xa6, 0xbc, 0x2a, 0x6d, 0xc9, 0x5a, 0x16, 0x47, 0xea, 0x7c, 0x15, 0x52, 0x27, 0xe1, 0x49,
	0x3c, 0xda, 0x83, 0x8a, 0x4b, 0xb9, 0x13, 0x79, 0xa1, 0x90, 0x31, 0x34, 0x15, 0xfd, 0xf6, 0x59,
	0xf4, 0xdd, 0x19, 0x14, 0xa7, 0x79, 0xe8, 0x97, 0x50, 0xe0, 0x82, 0x88, 0x21, 0xb7, 0x16, 0x94,
	0x84, 0xfa, 0x99, 0x06, 0x28, 0x94, 0x36, 0x41, 0x73, 0xd0, 0x33, 0xa8, 0x0e, 0x48, 0x40, 0x7a,
	0x34, 0xb2, 0xb5, 0x94, 0x82, 0x92, 0xf2, 0x83, 0x4c, 0xd7, 0x63, 0x64, 0x2c, 0x08, 0x2f, 0x0d,
	0xd2, 0x5b, 0xd4, 0x05, 0x20, 0x42, 0x10, 0xe7, 0xfd, 0x80, 0x06, 0xc2, 0x2a, 0x2a, 0x29, 0x3f,
	0xcc, 0xb4, 0x85, 0x8a, 0x0f, 0x2c, 0xea, 0xb7, 0xa7, 0xe0, 0x4e, 0xce, 0x32, 0x70, 0x8a, 0x8c,
	0x9e, 0x42, 0xc5, 0xa1, 0x91, 0xf0, 0xde, 0x79, 0x0e, 0x11, 0xd4, 0x2a, 0x29, 0x59, 0x8d, 0x2c,
	0x59, 0x3b, 0x33, 0x98, 0x76, 0x2c, 0xcd, 0x44, 0xf7, 0xc1, 0x8c, 0x98, 0x4f, 0xad, 0xf2, 0xba,
	0x71, 0xa7, 0x7a, 0xf6, 0xd5, 0x60, 0xe6, 0x53, 0xac, 0x90, 0x52, 0xf5, 0xcc, 0x10, 0x6e, 0xc1,
	0x7a, 0xfe, 0xd2, 0x6e, 0xe0, 0x34, 0x73, 0x7b, 0xf5, 0xf0, 0xa8, 0x89, 0x60, 0xb9, 0x64, 0x2c,
	0x1b, 0x2a, 0xcf, 0x8c, 0xfb, 0xc6, 0xef, 0x8c, 0xdf, 0x1b, 0xcd, 0xff, 0xe6, 0xa1, 0xf8, 0x8a,
	0x46, 0x23, 0xcf, 0xf9, 0xba, 0x59, 0xf8, 0xf0, 0x44, 0x16, 0x66, 0x06, 0x4b, 0xab, 0x9d, 0x4b,
	0xc4, 0x2d, 0x28, 0xd1, 0xc0, 0x0d, 0x99, 0x17, 0x08, 0x9d, 0x85, 0x99, 0x91, 0xda, 0xd3, 0x18,
	0x3c, 0x45, 0xa3, 0x3d, 0x58, 0x8a, 0x8b, 0xcb, 0x3e, 0x91, 0x82, 0xeb, 0x59, 0xf4, 0xdf, 0x2a,
	0xa0, 0xce, 0x9d, 0xc5, 0x61, 0x6a, 0x87, 0x76, 0x61, 0x29, 0x8c, 0xe8, 0xc8, 0x63, 0x43, 0x6e,
	0x2b, 0x27, 0x0a, 0x97, 0x72, 0x02, 0x2f, 0x26, 0x2c, 0xb9, 0x43, 0xbf, 0x82, 0x45, 0x49, 0xb6,
	0x93, 0xa6, 0x04, 0x17, 0x36, 0x25, 0x5c, 0x91, 0x04, 0xbd, 0x41, 0x2f, 0xe1, 0x3b, 0x27, 0xac,
	0x98, 0x0a, 0xaa, 0x5c, 0x2c, 0xe8, 0x66, 0xda, 0x12, 0xfd, 0x71, 0x1b, 0x1d, 0x1e, 0x35, 0xab,
	0xb0, 0x98, 0x4e, 0x81, 0xe6, 0x9f, 0x73, 0x50, 0x4a, 0x02, 0x89, 0x1e, 0xe8, 0x3b, 0x33, 0xce,
	0x8e, 0x5a, 0x82, 0x55, 0xfe, 0xc6, 0xd7, 0xf5, 0x00, 0x16, 0x42, 0x16, 0x09, 0x6e, 0xe5, 0x54,
	0x72, 0x66, 0xd6, 0xfb, 0x3e, 0x8b, 0xc4, 0x0e, 0x0b, 0xde, 0x79, 0x3d, 0x1c, 0x83, 0xd1, 0x5b,
	0xa8, 0x8c, 0xbc, 0x48, 0x0c, 0x89, 0x6f, 0x7b, 0x21, 0xb7, 0xf2, 0x8a, 0xfb, 0xa3, 0xf3, 0x54,
	0xb6, 0xde, 0xc4, 0xf8, 0xee, 0x7e, 0xa7, 0x3a, 0x39, 0x6e, 0xc0, 0x74, 0xcb, 0x31, 0x68, 0x51,
	0xdd, 0x90, 0xd7, 0x5e, 0x40, 0x79, 0x7a, 0x82, 0xee, 0x01, 0x04, 0x71, 0x5d, 0xd8, 0xd3, 0xcc,
	0x5e, 0x9a, 0x1c, 0x37, 0xca, 0xba, 0x5a, 0xba, 0xbb, 0xb8, 0xac, 0x01, 0x5d, 0x17, 0x21, 0x30,
	0x89, 0xeb, 0x46, 0x2a, 0xcf, 0xcb, 0x58, 0xad, 0x9b, 0x7f, 0x2a, 0x82, 0xf9, 0x9a, 0xf0, 0xfe,
	0x75, 0xb7, 0x68, 0xa9, 0x73, 0xae, 0x32, 0xee, 0x01, 0xf0, 0x38, 0xdf, 0xa4, 0x3b, 0xe6, 0xcc,
	0x1d, 0x9d, 0x85, 0xd2, 0x1d, 0x0d, 0x88, 0xdd, 0xe1, 0x3e, 0x13, 0xaa, 0x08, 0x4c, 0xac, 0xd6,
	0xe8, 0x36, 0x14, 0x03, 0xe6, 0x2a, 0x7a, 0x41, 0xd1, 0x61, 0x72, 0xdc, 0x28, 0xc8, 0xa6, 0xd3,
	0xdd, 0xc5, 0x05, 0x79, 0xd4, 0x75, 0x55, 0xd3, 0x09, 0x02, 0x26, 0x88, 0x6c, 0xe8, 0x5c, 0xf7,
	0xce, 0xcc, 0xec, 0x6f, 0xcf, 0x60, 0x49, 0xbf, 0x4b, 0x31, 0xd1, 0x1b, 0xb8, 0x99, 0xd8, 0x9b,
	0x16, 0x58, 0xba, 0x8a, 0x40, 0xa4, 0x25, 0xa4, 0x4e, 0x52, 0x6f, 0x4c, 0xf9, 0xec, 0x37, 0x46,
	0x45, 0x30, 0xeb, 0x8d, 0xe9, 0xc0, 0x92, 0x4b, 0xb9, 0x17, 0x51, 0x57, 0xb5, 0x09, 0xaa, 0x2a,
	0xb3, 0xba, 0xf9, 0xfd, 0xf3, 0x84, 0x50, 0xbc, 0xa8, 0x39, 0x6a, 0x87, 0xda, 0x50, 0xd2, 0x79,
	0xc3, 0xad, 0xca, 0x55, 0x9a, 0xf2, 0x94, 0x76, 0xa2, 0xcd, 0x2d, 0x5e, 0xa9, 0xcd, 0x3d, 0x04,
	0xf0, 0x59, 0xcf, 0x76, 0x23, 0x6f, 0x44, 0x23, 0x6b, 0x49, 0x4f, 0x1c, 0x19, 0xdc, 0x5d, 0x85,
	0xc0, 0x65, 0x9f, 0xf5, 0xe2, 0xe5, 0x5c, 0x53, 0xaa, 0x5e, 0xb1, 0x29, 0x11, 0xa8, 0x11, 0xce,
	0xbd, 0x5e, 0x40, 0x5d, 0xbb, 0x47, 0x03, 0x1a, 0x79, 0x8e, 0x1d, 0x51, 0xce, 0x86, 0x91, 0x43,
	0xb9, 0xf5, 0x2d, 0x15, 0x89, 0xcc, 0x99, 0xe1, 0x69, 0x0c, 0xc6, 0x1a, 0x8b, 0xad, 0x44, 0xcc,
	0xa9, 0x03, 0xbe, 0x5d, 0x3b, 0x3c, 0x6a, 0xae, 0xc2, 0x4a, 0xba, 0x4d, 0x6d, 0x19, 0x4f, 0x8c,
	0x67, 0xc6, 0xbe, 0xd1, 0xfc, 0x7b, 0x0e, 0xbe, 0x3d, 0x17, 0x53, 0xf4, 0x53, 0x28, 0xea, 0xa8,
	0x9e, 0x37, 0xf9, 0x69, 0x1e, 0x4e, 0xb0, 0x68, 0x0d, 0xca, 0xb2, 0xc4, 0x29, 0xe7, 0x34, 0x6e,
	0x5e, 0x65, 0x3c, 0xfb, 0x80, 0x2c, 0x28, 0x12, 0xdf, 0x23, 0xf2, 0x2c, 0xaf, 0xce, 0x92, 0x2d,
	0x1a, 0xc2, 0x6a, 0x1c, 0x7a, 0x7b, 0xf6, 0xc0, 0xda, 0x2c, 0x14, 0xdc, 0x32, 0x95, 0xff, 0x8f,
	0x2f, 0x95, 0x09, 0xfa, 0x72, 0x66, 0x1f, 0x5e, 0x86, 0x82, 0xef, 0x05, 0x22, 0x1a, 0xe3, 0x15,
	0x37, 0xe3, 0xa8, 0xf6, 0x14, 0x6e, 0x9d, 0x49, 0x41, 0xcb, 0x90, 0xef, 0xd3, 0x71, 0xdc, 0x9e,
	0xb0, 0x5c, 0xa2, 0x15, 0x58, 0x18, 0x11, 0x7f, 0x48, 0x75, 0x37, 0x8b, 0x37, 0xdb, 0xb9, 0x2d,
	0xa3, 0xf9, 0x29, 0x07, 0x45, 0x6d, 0xce, 0x75, 0x3f, 0xf9, 0x5a, 0xed, 0x5c, 0x63, 0x7b, 0x04,
	0x8b, 0x3a, 0xa4, 0x71, 0x45, 0x9a, 0x17, 0xe6, 0x74, 0x25, 0xc6, 0xc7, 0xd5, 0xf8, 0x08, 0x4c,
	0x2f, 0x24, 0x03, 0xfd, 0xdc, 0x67, 0x6a, 0xee, 0xee, 0xb7, 0x5f, 0xbc, 0x0c, 0xe3, 0xc6, 0x52,
	0x9a, 0x1c, 0x37, 0x4c, 0xf9, 0x01, 0x2b, 0x5a, 0xe6, 0xc3, 0xf8, 0x97, 0x05, 0x28, 0xee, 0xf8,
	0x43, 0x2e, 0x68, 0x74, 0xdd, 0x41, 0xd2, 0x6a, 0xe7, 0x82, 0xb4, 0x03, 0xc5, 0x88, 0x31, 0x61,
	0x3b, 0xe4, 0xbc, 0xf8, 0x60, 0xc6, 0xc4, 0x4e, 0xbb, 0x53, 0x95, 0x44, 0xd9, 0xdb, 0xe3, 0x3d,
	0x2e, 0x48, 0xea, 0x0e, 0x41, 0x6f, 0x61, 0x35, 0x79, 0x11, 0x0f, 0x18, 0x13, 0x5c, 0x44, 0x24,
	0xb4, 0xfb, 0x74, 0x2c, 0x67, 0xa5, 0xfc, 0x59, 0x83, 0xf6, 0x5e, 0xe0, 0x44, 0x63, 0x15, 0xbc,
	0xe7, 0x74, 0x8c, 0x57, 0xb4, 0x80, 0x4e, 0xc2, 0x7f, 0x4e, 0xc7, 0x1c, 0x3d, 0x86, 0x35, 0x3a,
	0x85, 0x49, 0x89, 0xb6, 0x4f, 0x06, 0xf2, 0xad, 0xb7, 0x1d, 0x9f, 0x39, 0x7d, 0xf5, 0xdc, 0x98,
	0xf8, 0x16, 0x4d, 0x8b, 0xfa, 0x75, 0x8c, 0xd8, 0x91, 0x00, 0xc4, 0xc1, 0x3a, 0xf0, 0x89, 0xd3,
	0xf7, 0x3d, 0x2e, 0xff, 0x97, 0x4a, 0xcd, 0xcd, 0xf2, 0xc5, 0x90, 0xb6, 0x6d, 0x9d, 0x13, 0xad,
	0x56, 0x67, 0xc6, 0x4d, 0x4d, 0xe1, 0xba, 0xa2, 0xbe, 0x7b, 0x90, 0x7d, 0x8a, 0x3a, 0x50, 0x19,
	0x06, 0x52, 0x7d, 0x1c, 0x83, 0xf2, 0x65, 0x63, 0x00, 0x31, 0x4b, 0x7a, 0x5e, 0x1b, 0xc1, 0xda,
	0x79, 0xca, 0x33, 0x6a, 0xf3, 0x49, 0xba, 0x36, 0x2b, 0x9b, 0x77, 0xb3, 0xf4, 0x65, 0x8b, 0x4c,
	0xd5, 0x71, 0x66, 0xda, 0xfe, 0xcd, 0x80, 0xc2, 0x2b, 0xea, 0x44, 0x54, 0x7c, 0xd5, 0xac, 0xdd,
	0x3a, 0x91, 0xb5, 0xf5, 0xec, 0x41, 0x58, 0x6a, 0x9d, 0x4b, 0xda, 0x1a, 0x94, 0xbc, 0x40, 0xd0,
	0x28, 0x20, 0xbe, 0xca, 0xda, 0x12, 0x9e, 0xee, 0x33, 0x1d, 0xf8, 0x64, 0x40, 0x21, 0x9e, 0x14,
	0xaf, 0xdb, 0x81, 0x58, 0xeb, 0x69, 0x07, 0x32, 0x8d, 0xfc, 0x8f, 0x01, 0xa5, 0xe4, 0xc1, 0xfa,
	0xaa, 0x66, 0x9e, 0x9a, 0xbc, 0xf2, 0xff, 0xf7, 0xe4, 0x85, 0xc0, 0xec, 0x7b, 0x81, 0x9e, 0x11,
	0xb1, 0x5a, 0xa3, 0x16, 0x14, 0x43, 0x32, 0xf6, 0x19, 0x71, 0x75, 0xa3, 0x5c, 0x99, 0xfb, 0x95,
	0xa2, 0x1d, 0x8c, 0x71, 0x02, 0xda, 0x5e, 0x39, 0x3c, 0x6a, 0x2e, 0x43, 0x35, 0xed, 0xf9, 0x7b,
	0xa3, 0xf9, 0x4f, 0x03, 0xca, 0x7b, 0x7f, 0x14, 0x34, 0x50, 0xf3, 0xc0, 0x37, 0xd2, 0xf9, 0xf5,
	0xf9, 0x5f, 0x32, 0xca, 0x27, 0x7e, 0xa4, 0xc8, 0xba, 0xd4, 0x8e, 0xf5, 0xf9, 0x4b, 0xfd, 0xc6,
	0xbf, 0xbe, 0xd4, 0x6f, 0x7c, 0x9c, 0xd4, 0x8d, 0xcf, 0x93, 0xba, 0xf1, 0x8f, 0x49, 0xdd, 0xf8,
	0xf7, 0xa4, 0x6e, 0x1c, 0x14, 0x54, 0x7c, 0x7e, 0xf2, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9,
	0xa1, 0x26, 0x54, 0x90, 0x13, 0x00, 0x00,
***REMOVED***
