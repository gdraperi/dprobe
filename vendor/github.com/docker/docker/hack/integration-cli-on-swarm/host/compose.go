package main

import (
	"context"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"

	"github.com/docker/docker/client"
)

const composeTemplate = `# generated by integration-cli-on-swarm
version: "3"

services:
  worker:
    image: "***REMOVED******REMOVED***.WorkerImage***REMOVED******REMOVED***"
    command: ["-worker-image-digest=***REMOVED******REMOVED***.WorkerImageDigest***REMOVED******REMOVED***", "-dry-run=***REMOVED******REMOVED***.DryRun***REMOVED******REMOVED***", "-keep-executor=***REMOVED******REMOVED***.KeepExecutor***REMOVED******REMOVED***"]
    networks:
      - net
    volumes:
# Bind-mount the API socket so that we can invoke "docker run --privileged" within the service containers
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_GRAPHDRIVER=***REMOVED******REMOVED***.EnvDockerGraphDriver***REMOVED******REMOVED***
      - DOCKER_EXPERIMENTAL=***REMOVED******REMOVED***.EnvDockerExperimental***REMOVED******REMOVED***
    deploy:
      mode: replicated
      replicas: ***REMOVED******REMOVED***.Replicas***REMOVED******REMOVED***
      restart_policy:
# The restart condition needs to be any for funker function
        condition: any

  master:
    image: "***REMOVED******REMOVED***.MasterImage***REMOVED******REMOVED***"
    command: ["-worker-service=worker", "-input=/mnt/input", "-chunks=***REMOVED******REMOVED***.Chunks***REMOVED******REMOVED***", "-shuffle=***REMOVED******REMOVED***.Shuffle***REMOVED******REMOVED***", "-rand-seed=***REMOVED******REMOVED***.RandSeed***REMOVED******REMOVED***"]
    networks:
      - net
    volumes:
      - ***REMOVED******REMOVED***.Volume***REMOVED******REMOVED***:/mnt
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none
      placement:
# Make sure the master can access the volume
        constraints: [node.id == ***REMOVED******REMOVED***.SelfNodeID***REMOVED******REMOVED***]

networks:
  net:

volumes:
  ***REMOVED******REMOVED***.Volume***REMOVED******REMOVED***:
    external: true
`

type composeOptions struct ***REMOVED***
	Replicas     int
	Chunks       int
	MasterImage  string
	WorkerImage  string
	Volume       string
	Shuffle      bool
	RandSeed     int64
	DryRun       bool
	KeepExecutor bool
***REMOVED***

type composeTemplateOptions struct ***REMOVED***
	composeOptions
	WorkerImageDigest     string
	SelfNodeID            string
	EnvDockerGraphDriver  string
	EnvDockerExperimental string
***REMOVED***

// createCompose creates "dir/docker-compose.yml".
// If dir is empty, TempDir() is used.
func createCompose(dir string, cli *client.Client, opts composeOptions) (string, error) ***REMOVED***
	if dir == "" ***REMOVED***
		var err error
		dir, err = ioutil.TempDir("", "integration-cli-on-swarm-")
		if err != nil ***REMOVED***
			return "", err
		***REMOVED***
	***REMOVED***
	resolved := composeTemplateOptions***REMOVED******REMOVED***
	resolved.composeOptions = opts
	workerImageInspect, _, err := cli.ImageInspectWithRaw(context.Background(), defaultWorkerImageName)
	if err != nil ***REMOVED***
		return "", err
	***REMOVED***
	if len(workerImageInspect.RepoDigests) > 0 ***REMOVED***
		resolved.WorkerImageDigest = workerImageInspect.RepoDigests[0]
	***REMOVED*** else ***REMOVED***
		// fall back for non-pushed image
		resolved.WorkerImageDigest = workerImageInspect.ID
	***REMOVED***
	info, err := cli.Info(context.Background())
	if err != nil ***REMOVED***
		return "", err
	***REMOVED***
	resolved.SelfNodeID = info.Swarm.NodeID
	resolved.EnvDockerGraphDriver = os.Getenv("DOCKER_GRAPHDRIVER")
	resolved.EnvDockerExperimental = os.Getenv("DOCKER_EXPERIMENTAL")
	composeFilePath := filepath.Join(dir, "docker-compose.yml")
	tmpl, err := template.New("").Parse(composeTemplate)
	if err != nil ***REMOVED***
		return "", err
	***REMOVED***
	f, err := os.Create(composeFilePath)
	if err != nil ***REMOVED***
		return "", err
	***REMOVED***
	defer f.Close()
	if err = tmpl.Execute(f, resolved); err != nil ***REMOVED***
		return "", err
	***REMOVED***
	return composeFilePath, nil
***REMOVED***
